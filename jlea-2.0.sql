-- MySQL dump 10.13  Distrib 8.0.24, for Linux (x86_64)
--
-- Host: localhost    Database: jlea
-- ------------------------------------------------------
-- Server version	8.0.24

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `links`
--

DROP TABLE IF EXISTS `links`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `links` (
  `id` int NOT NULL AUTO_INCREMENT,
  `a` int DEFAULT NULL,
  `r` int DEFAULT NULL,
  `b` int DEFAULT NULL,
  `data` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  KEY `idx_nodes_a` (`a`),
  KEY `idx_nodes_r` (`r`),
  KEY `idx_nodes_b` (`b`)
) ENGINE=InnoDB AUTO_INCREMENT=220 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `links`
--

LOCK TABLES `links` WRITE;
/*!40000 ALTER TABLE `links` DISABLE KEYS */;
INSERT INTO `links` VALUES (1,1,2,3,'2020-09-15 00:01:30'),(2,4,5,6,'2021-02-06 23:07:18'),(3,7,8,9,'2021-02-06 23:12:41'),(4,7,10,11,'2021-02-06 23:16:47'),(5,12,13,14,'2021-02-06 23:19:20'),(6,12,15,16,'2021-02-06 23:20:47'),(7,1,17,18,'2021-02-06 23:23:52'),(8,1,19,20,'2021-02-06 23:28:21'),(10,12,22,23,'2021-02-06 23:36:16'),(11,12,24,25,'2021-02-06 23:41:56'),(12,12,26,27,'2021-02-06 23:42:36'),(14,12,24,29,'2021-02-06 23:46:53'),(15,12,24,30,'2021-02-06 23:47:50'),(17,32,33,34,'2021-02-07 00:07:54'),(18,32,35,36,'2021-02-07 00:08:42'),(19,32,8,37,'2021-02-07 00:14:19'),(20,12,38,39,'2021-02-07 01:07:44'),(21,12,40,41,'2021-02-07 01:09:02'),(22,12,42,43,'2021-02-07 01:12:31'),(24,12,45,46,'2021-02-07 01:14:49'),(28,12,42,47,'2021-02-07 01:20:25'),(30,12,42,48,'2021-02-07 01:26:53'),(31,12,38,49,'2021-02-07 01:29:43'),(32,12,42,50,'2021-02-07 01:31:14'),(33,12,40,51,'2021-02-07 01:31:44'),(34,4,5,52,'2021-02-07 01:39:07'),(35,12,53,54,'2021-02-07 01:45:27'),(36,12,40,55,'2021-02-07 01:46:27'),(37,12,38,56,'2021-02-07 01:47:21'),(38,12,42,57,'2021-02-07 01:55:15'),(39,12,38,58,'2021-02-07 01:58:33'),(40,12,38,59,'2021-02-07 01:59:04'),(41,12,42,60,'2021-02-07 02:00:55'),(42,12,42,61,'2021-02-07 02:52:07'),(43,12,45,62,'2021-02-07 02:55:16'),(44,4,5,63,'2021-02-07 02:57:01'),(45,12,2,64,'2021-02-07 03:00:45'),(46,12,5,65,'2021-02-07 03:02:28'),(50,12,67,66,'2021-02-07 03:06:06'),(51,12,67,68,'2021-02-07 03:13:09'),(52,12,67,69,'2021-02-07 03:14:41'),(53,12,67,69,'2021-02-07 03:14:51'),(54,12,67,70,'2021-02-07 03:15:06'),(55,12,67,70,'2021-02-07 03:15:19'),(56,12,67,71,'2021-02-07 03:15:29'),(57,32,72,73,'2021-02-08 19:52:48'),(58,32,74,75,'2021-02-08 21:01:34'),(59,32,76,77,'2021-02-08 21:06:19'),(60,32,76,78,'2021-02-08 21:08:23'),(61,32,74,79,'2021-02-08 21:37:29'),(62,32,74,80,'2021-02-08 21:38:01'),(63,32,72,81,'2021-02-08 21:45:40'),(64,32,35,82,'2021-02-08 21:47:38'),(65,83,84,85,'2021-02-08 21:47:57'),(66,86,87,88,'2021-02-08 21:47:57'),(67,83,89,90,'2021-02-08 21:55:03'),(68,86,87,88,'2021-02-08 21:55:03'),(69,91,89,92,'2021-02-08 22:14:42'),(70,86,87,88,'2021-02-08 22:14:43'),(71,91,94,95,'2021-02-08 22:17:03'),(72,86,87,88,'2021-02-08 22:17:04'),(73,83,96,97,'2021-02-08 22:17:58'),(74,86,87,88,'2021-02-08 22:17:58'),(75,91,94,100,'2021-02-08 22:18:15'),(76,86,87,88,'2021-02-08 22:18:15'),(77,101,102,103,'2021-02-08 22:21:55'),(78,86,87,88,'2021-02-08 22:21:55'),(79,101,105,106,'2021-02-08 22:22:49'),(80,86,87,88,'2021-02-08 22:22:49'),(81,83,107,108,'2021-02-08 22:23:23'),(82,86,87,88,'2021-02-08 22:23:23'),(83,101,89,109,'2021-02-08 22:23:51'),(84,86,87,88,'2021-02-08 22:23:51'),(85,110,89,111,'2021-02-08 22:24:33'),(86,86,87,88,'2021-02-08 22:24:33'),(87,101,112,113,'2021-02-08 22:25:11'),(88,86,87,88,'2021-02-08 22:25:11'),(89,101,114,115,'2021-02-08 22:25:44'),(90,86,87,88,'2021-02-08 22:25:44'),(91,101,116,117,'2021-02-08 22:26:01'),(92,86,87,88,'2021-02-08 22:26:01'),(93,101,118,119,'2021-02-08 22:26:29'),(94,86,87,88,'2021-02-08 22:26:29'),(95,101,120,121,'2021-02-08 22:26:49'),(96,86,87,88,'2021-02-08 22:26:49'),(97,110,122,123,'2021-02-08 22:27:21'),(98,86,87,88,'2021-02-08 22:27:21'),(99,124,125,126,'2021-02-08 22:27:46'),(100,86,87,88,'2021-02-08 22:27:46'),(101,101,127,128,'2021-02-08 22:28:19'),(102,86,87,88,'2021-02-08 22:28:19'),(103,101,129,130,'2021-02-08 22:28:32'),(104,86,87,88,'2021-02-08 22:28:32'),(105,101,131,132,'2021-02-08 22:28:45'),(106,86,87,88,'2021-02-08 22:28:45'),(108,86,87,88,'2021-02-08 22:29:40'),(109,124,89,136,'2021-02-08 22:31:48'),(110,86,87,88,'2021-02-08 22:31:48'),(111,124,94,137,'2021-02-08 22:32:17'),(112,86,87,88,'2021-02-08 22:32:17'),(113,124,138,139,'2021-02-08 22:32:50'),(114,86,87,88,'2021-02-08 22:32:50'),(115,124,140,141,'2021-02-08 22:33:19'),(116,86,87,88,'2021-02-08 22:33:19'),(117,110,94,142,'2021-02-08 22:34:10'),(118,86,87,88,'2021-02-08 22:34:10'),(119,110,143,144,'2021-02-08 22:35:40'),(120,86,87,88,'2021-02-08 22:35:40'),(121,110,145,146,'2021-02-08 22:35:54'),(122,86,87,88,'2021-02-08 22:35:55'),(123,110,118,147,'2021-02-08 22:36:22'),(124,86,87,88,'2021-02-08 22:36:22'),(125,148,89,149,'2021-02-08 22:37:12'),(126,86,87,88,'2021-02-08 22:37:12'),(127,83,135,97,'2021-02-08 22:37:56'),(128,86,87,88,'2021-02-08 22:37:57'),(129,101,138,150,'2021-02-08 22:38:11'),(130,86,87,88,'2021-02-08 22:38:11'),(131,101,151,152,'2021-02-08 22:39:46'),(132,86,87,88,'2021-02-08 22:39:46'),(133,124,153,154,'2021-02-08 22:40:04'),(134,86,87,88,'2021-02-08 22:40:04'),(135,124,155,156,'2021-02-08 22:40:20'),(136,86,87,88,'2021-02-08 22:40:20'),(138,101,133,158,'2021-02-08 23:05:33'),(139,86,87,88,'2021-02-08 23:05:33'),(141,86,87,88,'2021-02-08 23:29:48'),(142,110,133,161,'2021-02-08 23:31:01'),(143,86,87,88,'2021-02-08 23:31:01'),(145,86,87,88,'2021-02-08 23:31:39'),(146,12,67,162,'2021-02-08 23:34:14'),(147,163,94,164,'2021-02-08 23:34:53'),(148,86,87,88,'2021-02-08 23:34:53'),(150,86,87,88,'2021-02-08 23:35:45'),(151,163,155,167,'2021-02-08 23:36:53'),(152,86,87,88,'2021-02-08 23:36:53'),(154,163,168,169,'2021-02-08 23:38:39'),(155,86,87,88,'2021-02-08 23:38:39'),(157,86,87,88,'2021-02-08 23:40:23'),(159,86,87,88,'2021-02-08 23:44:18'),(161,86,87,88,'2021-02-08 23:48:22'),(162,12,170,171,'2021-02-08 23:51:38'),(164,86,87,88,'2021-02-08 23:52:17'),(166,86,87,88,'2021-02-08 23:52:32'),(167,148,94,160,'2021-02-08 23:53:09'),(168,86,87,88,'2021-02-08 23:53:09'),(170,86,87,88,'2021-02-08 23:54:26'),(172,86,87,88,'2021-02-08 23:55:03'),(173,148,173,174,'2021-02-09 00:03:01'),(174,86,87,88,'2021-02-09 00:03:01'),(175,83,175,97,'2021-02-09 00:03:17'),(176,86,87,88,'2021-02-09 00:03:17'),(177,110,140,176,'2021-02-09 00:04:50'),(178,86,87,88,'2021-02-09 00:04:50'),(179,148,118,177,'2021-02-09 00:06:11'),(180,86,87,88,'2021-02-09 00:06:11'),(181,148,178,179,'2021-02-09 00:06:33'),(182,86,87,88,'2021-02-09 00:06:33'),(183,148,180,181,'2021-02-09 00:06:57'),(184,86,87,88,'2021-02-09 00:06:57'),(185,124,182,183,'2021-02-09 00:08:46'),(186,86,87,88,'2021-02-09 00:08:46'),(187,124,184,185,'2021-02-09 00:09:08'),(188,86,87,88,'2021-02-09 00:09:08'),(189,101,138,186,'2021-02-09 00:14:00'),(190,86,87,88,'2021-02-09 00:14:00'),(192,86,87,88,'2021-02-09 00:14:32'),(193,124,187,188,'2021-02-09 00:18:23'),(194,86,87,88,'2021-02-09 00:18:23'),(195,163,189,190,'2021-02-09 00:18:49'),(196,86,87,88,'2021-02-09 00:18:49'),(197,163,133,191,'2021-02-09 00:19:13'),(198,86,87,88,'2021-02-09 00:19:13'),(199,163,168,192,'2021-02-09 00:23:43'),(200,86,87,88,'2021-02-09 00:23:43'),(201,124,193,194,'2021-02-09 00:39:20'),(202,86,87,88,'2021-02-09 00:39:20'),(203,12,195,196,'2021-02-09 00:50:16'),(204,12,195,197,'2021-02-09 00:51:42'),(205,12,195,197,'2021-02-09 00:52:09'),(206,12,195,198,'2021-02-09 00:55:19'),(207,91,133,199,'2021-02-09 01:38:06'),(208,86,87,88,'2021-02-09 01:38:06'),(209,12,8,200,'2021-02-09 02:04:00'),(210,32,8,201,'2021-02-09 02:11:14'),(211,32,8,202,'2021-02-09 02:11:58'),(212,12,8,203,'2021-02-09 02:12:36'),(216,1,19,204,'2021-05-23 23:41:59'),(217,1,8,205,'2021-05-23 23:44:41'),(218,1,8,206,'2021-05-23 23:44:54'),(219,7,8,207,'2021-05-24 15:19:52');
/*!40000 ALTER TABLE `links` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `symbols`
--

DROP TABLE IF EXISTS `symbols`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `symbols` (
  `id` int NOT NULL AUTO_INCREMENT,
  `z` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci DEFAULT NULL,
  `info` mediumtext CHARACTER SET utf8 COLLATE utf8_unicode_ci,
  `data` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=208 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `symbols`
--

LOCK TABLES `symbols` WRITE;
/*!40000 ALTER TABLE `symbols` DISABLE KEYS */;
INSERT INTO `symbols` VALUES (1,'java.lang.String','NaiveMind','2020-09-15 00:01:30'),(2,'java.lang.String','EmptyAction','2020-09-15 00:01:30'),(3,'java','/**\n * MInD - Model for Intelligence Development\n * by Renato Lenz Costalima\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. \n */\npackage br.ifce.mind.action.live;\n\nimport br.ifce.mind.actions.AbstractAction;\n\npublic class EmptyAction extends AbstractAction {\n\n	public void act(Object args, Object callback) {\n		callback(callback, null);\n	}\n\n}\n','2020-09-15 00:01:30'),(4,'java.lang.String','QuestionsController','2021-02-06 23:07:18'),(5,'java.lang.String','index','2021-02-06 23:07:18'),(6,'java','/**\n * MInD - Model for Intelligence Development\n * by Renato Lenz Costalima\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. \n */\npackage br.ifce.mind.action.live;\n\nimport br.ifce.mind.actions.AbstractAction;\n\nimport java.io.IOException;\nimport java.util.List;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\npublic class Index extends AbstractAction {\n\n	public void act(Object _args, Object callback) {\n		try {\n			Object[] args = (Object[]) _args;\n			HttpServletRequest request = (HttpServletRequest) args[0];\n			HttpServletResponse response = (HttpServletResponse) args[1];\n			List<Object []> questions = (List<Object []>) request.getServletContext().getAttribute(\"questions\");\n			response.getWriter().println(\"Oi, tia Gessica!!\");\n			for (Object [] question: questions) {\n				response.getWriter().println(question[0] + \": \" + question[1]);\n			}\n		} catch (IOException e) {}\n		\n		callback(callback, null);\n	}\n\n}\n','2021-02-06 23:07:18'),(7,'java.lang.String','Front','2021-02-06 23:12:41'),(8,'java.lang.String','live','2021-02-06 23:12:41'),(9,'java','package br.ifce.mind.actions.live;\n\nimport br.ifce.mind.actions.AbstractAction;\nimport br.ifce.mind.Agent;\n\nimport javax.servlet.ServletContext;\nimport javax.servlet.ServletContextEvent;\n\npublic class live extends AbstractAction {\n\n	public void act(Object target, Object callback) {\n		ServletContextEvent event = (ServletContextEvent) target;\n		ServletContext context = event.getServletContext();\n        \n		Agent agent = this.getAgent();\n		\nSystem.out.println(\"\\n\\n\" + agent + \".front.live(\" + event + \")\\n\\n\");\n//		agent.see(\"Controller.live\", event, callback);\n\n		doCallback(callback, true);\n	}\n\n}','2021-02-06 23:12:41'),(10,'java.lang.String','http','2021-02-06 23:16:47'),(11,'java',' package br.ifce.mind.actions.live;\n \n import br.ifce.mind.actions.AbstractAction;\n import br.ifce.mind.Agent;\n \n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n \n public class http extends AbstractAction {\n \n 	public void act(Object target, Object callback) {\n 		Object [] args = (Object []) target;\n 		HttpServletRequest request = (HttpServletRequest) args[0];\n 		HttpServletResponse response = (HttpServletResponse) args[1];\n 		String agentName;\n 		String actionName;\n 		String agentNameTmp;\n 		String actionNameTmp;\n		String [] url = request.getRequestURI().split(\"/\", 6);\n		Agent front = this.getAgent();\n// System.out.println(request.getRequestURI());\n		// escolhe o agente baseado na URL\n		try {\n			agentNameTmp = url[3];\n		}\n		catch (ArrayIndexOutOfBoundsException e) {\n			agentNameTmp = \"index\";\n		}\n		try {\n			actionNameTmp = url[4];\n		}\n		catch (ArrayIndexOutOfBoundsException e) {\n			actionNameTmp = \"index\";\n		}\n		agentName = agentNameTmp;\n		actionName = actionNameTmp;\n\n		front.see(\"getAgent\", agentName + \"Controller,Controller\", new AbstractAction () {\n			public void act(Object t, Object c) {\n				Agent agent = (Agent) t;\n				\n				request.setAttribute(\"controller\", agent);\n				request.setAttribute(\"actionName\", actionName);\n\n//System.out.println(\"prÃ©-chamando: \" + agent + \", \" + actionName);\n				agent.see(\"preDispatch\", args, new AbstractAction() {\n					public void act(Object t, Object c) {\n//System.out.println(\"chamando2: \" + agent + \", \" + actionName);\n						agent.see(actionName, args, new AbstractAction () {\n						    public void act(Object t, Object c) {\n//System.out.println(\"resultado: \" + agent + \", \" + actionName + \" = \" + t);\ndoCallback(callback, true);\n						    }\n						});\n					}\n				});\n			}\n		});\n 	}\n \n }','2021-02-06 23:16:47'),(12,'java.lang.String','Controller','2021-02-06 23:19:20'),(13,'java.lang.String','preDispatch','2021-02-06 23:19:20'),(14,'java','package br.ifce.mind.actions.live;\n\nimport br.ifce.mind.actions.Action;\nimport br.ifce.mind.actions.AbstractAction;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\npublic class preDispatch extends AbstractAction {\n\n	public void act(Object target, Object callback) {		\n		Object [] args = (Object []) target;\n		HttpServletRequest request = (HttpServletRequest) args[0];\n		HttpServletResponse response = (HttpServletResponse) args[1];\n		\n		this.getAgent().see(\"checkPermissions\", target, new AbstractAction () {\n			public void act(Object allowed, Object c) {\n				if ((Boolean) allowed) {\n					doCallback(callback, true);\n				}\n				else {\n					try {\n						response.setContentType(\"application/json\");\n						\n						response.getWriter().println(\"{ok: false, error: \'Permission denied!\'}\");\n					} catch(Exception e) {\n						System.out.println(\"erroBrainTie: \" + e);\n					}\n				}\n			}\n		});\n	}\n\n}','2021-02-06 23:19:20'),(15,'java.lang.String','checkPermissions','2021-02-06 23:20:47'),(16,'java','/**\n * LEA - Live Editing Applications\n * by Renato Lenz Costalima\n * This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/.\n * Permissions beyond the scope of this license may be available at macaroots@gmail.com.\n */\npackage br.ifce.mind.actions.live;\n\nimport br.ifce.brain.Link;\nimport br.ifce.mind.actions.AbstractAction;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\npublic class checkPermissions extends AbstractAction {\n\n	public void act(Object target, Object callback) {		\n		Object [] args = (Object []) target;\n		HttpServletRequest request = (HttpServletRequest) args[0];\n		HttpServletResponse response = (HttpServletResponse) args[1];\n\n		String username = (String) request.getSession().getAttribute(\"username\");\n		String actionName = (String) request.getAttribute(\"actionName\");\n		\n		boolean allowed = false;\n		if (!\"hearAnswer\".equals(actionName) || \"admin\".equals(username)) {\n			allowed = true;\n		}\n	    \n		doCallback(callback, true); //allowed);\n	}\n\n}','2021-02-06 23:20:47'),(17,'java.lang.String','getAgent','2021-02-06 23:23:52'),(18,'java','package br.ifce.mind.actions.live;\n\nimport br.ifce.mind.actions.AbstractAction;\nimport br.ifce.mind.Agent;\n\npublic class getAgent extends AbstractAction {\n\n	public void act(Object target, Object callback) {\n		String name = (String) target;\n		Agent agent = this.getAgent();\n		agent.see(\"get\", \"agent-\" + name, new AbstractAction () {\n			public void act (Object t, Object c) {\n				Agent a = (Agent) t;\n				if (a != null) {\n					doCallback(callback, a);\n				}\n				else {\n					agent.see(\"newAgent\", name, callback);\n				}\n			}\n		});\n	}\n\n}','2021-02-06 23:23:52'),(19,'java.lang.String','newAgent','2021-02-06 23:28:21'),(20,'java','package br.ifce.mind.actions.live;\n\nimport br.ifce.mind.actions.AbstractAction;\nimport br.ifce.mind.Agent;\nimport br.ifce.mind.Ceed;\n\nimport java.util.List;\n\npublic class newAgent extends AbstractAction {\n\n	public void act(Object target, Object callback) {\n		String names = ((String) target);\n		Agent ce = this.getAgent();\n		\n		Agent a = Ceed.getAgent(names);\n\n		a.see(\"set\", new Object [] {\"parent\", ce}, new AbstractAction () {\n			public void act(Object t, Object c) {\n//				a.see(\"study\", \"ask\");\n\n				ce.see(\"set\", new Object [] {\"agent\", a});\n				ce.see(\"set\", new Object [] {\"agent-\" + names, a});\n				ce.see(\"getAll\", \"agentObserver\", new AbstractAction () {\n					public void act(Object target, Object c) {\n						for (Agent observer: (List<Agent>) target) {\n							observer.see(\"refreshAgents\", ce);\n						}\n					}\n				});\n\n				a.see(\"live\", null);\n				doCallback(callback, a);\n			}\n		});\n	}\n\n}','2021-02-06 23:28:21'),(21,'jsp','<%@ page import=\"br.ifce.mind.Agent\" %>\n<%@ page import=\"br.ifce.mind.actions.AbstractAction\" %>\n<%\nAgent agent = (Agent) request.getAttribute(\"controller\");\nagent.see(\"baseUrl\", new Object [] {request}, new AbstractAction () {\n    public void act(Object t, Object c) {\n        request.setAttribute(\"baseUrl\", t);\n    }\n});\nagent.see(\"controllerUrl\", new Object [] {request}, new AbstractAction () {\n    public void act(Object t, Object c) {\n        request.setAttribute(\"controllerUrl\", t);\n    }\n});\n\nString actionName = (String) request.getAttribute(\"actionName\");\nString baseUrl = (String) request.getAttribute(\"baseUrl\");\nString controllerUrl = (String) request.getAttribute(\"controllerUrl\");\nString address = controllerUrl + actionName + \"/\";\n\n%>\n<!DOCTYPE html>\n<html>\n<head>\n	<title>LEA - Live Environment for Agents</title>\n	<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" />\n    <script src=\"<%=baseUrl%>_js/jquery-1.8.3.min.js\"></script>\n    <script src=\"<%=baseUrl%>_js/brain.js\"></script>\n    <script src=\"<%=baseUrl%>_js/jsbrain.js\"></script>\n    <script src=\"<%=baseUrl%>_js/ajaxbrain.js\"></script>\n    <script src=\"<%=baseUrl%>_js/mind.js\"></script>\n    <script src=\"<%=baseUrl%>_js/agent.js\"></script>\n    <script src=\"<%=baseUrl%>_js/ceed.js\"></script>\n    <script src=\"<%=baseUrl%>_js/lea.js\"></script>\n    <script>\n    $(function () {\n        var baseUrl = \'<%=baseUrl%>\'\n        var controllerUrl = \'<%=controllerUrl%>\';\n        window[\'baseUrl\'] = baseUrl;\n        window[\'controllerUrl\'] = controllerUrl;\n        var pathname = window.location.pathname.split(\'/\');\n        var agentName = pathname.slice(3).join(\'/\');\n    	//var agentName = controllerUrl.split(\'/\').slice(-2, -1)[0];\n        window[\'page\'] = LEA.getAgent(agentName + \' Page\');\n        page.see(\'live\', \'body\', function () {\n    	    page.see(\'getAgent\', \'Ceed\', function (ceed) {\n            	window[\'ceed\'] = ceed;\n        	    ceed.see(\'set\', [\'parent\', ceed], function () {\n                	ceed.see(\'live\', \'body\', function (ok) {\n                    	ceed.see(\'refreshAgents\');\n                	    page.see(\'set\', [\'parent\', ceed], function () {\n                    	    page.see(\'study\', \'ask\', function () {\n                	            page.see(\'edit\');\n                	        });\n                	    });\n            	    });\n            	});\n                var controller = new HTTPAgent(controllerUrl);\n                window[\'controller\'] = controller;\n        	});\n        });\n    });\n	</script>\n	<style>\n	#auth {\n        position: sticky;\n        top: 0;\n        text-align: right;\n    }\n    \n    #license {\n        position: fixed;\n        bottom: 8px;\n        right: 8px;\n        text-align: right;\n        width: 420px;\n    }\n    body {\n        padding-bottom: 75px;\n    }\n	</style>\n</head>\n<body>\n    <div id=\"auth\">\n<%\ntry {\n    String username = request.getSession().getAttribute(\"username\").toString();\n%>\n        Welcome, <span><%=username%></span>!\n        <a href=\"<%=baseUrl%>ce/auth/logout\">Logout</a>\n<%\n}\ncatch (Exception e) {\n%>\n        <a href=\"<%=baseUrl%>ce/auth\">Login</a>\n<%\n}\n%>\n    </div>\n    <div id=\"license\">\n        <b><a target=\"_blank\" href=\"https://tiia.com.br/\">LEA - Live Environment for Agents</a></b> by <a href=\"mailto: macaroots@gmail.com\">Renato Lenz Costalima</a><br />\n        This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at <a rel=\"license\" href=\"https://mozilla.org/MPL/2.0/\">https://mozilla.org/MPL/2.0/</a>.\n    </div>\n</body>\n</html>','2021-02-06 23:35:41'),(22,'java.lang.String','jsp','2021-02-06 23:36:16'),(23,'java','package br.ifce.mind.actions.live;\n\nimport br.ifce.mind.Agent;\nimport br.ifce.mind.NaiveMind;\nimport br.ifce.mind.actions.AbstractAction;\n\nimport java.util.List;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.PrintWriter;\nimport java.io.IOException;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.ServletException;\n\npublic class jsp extends AbstractAction {\n\n	public static int line = 0;\n\n	public void act(Object target, Object callback) {\n		\n		String filename = \"tmp\" + (line++) + \".jsp\";\n		String code = (String) target;\n\n		Agent agent = this.getAgent();\n		agent.see(\"require\", new Object [] {\"publicPath\"}, new AbstractAction () {\n			public void act(Object t, Object c) {\n				Object action = null;\n				String publicPath = (String) t;\n				if (publicPath == null || \"\".equals(publicPath)) {\n					publicPath = \"./\";\n				}\n				String folder = \"live/\" + ((NaiveMind) agent.getMind()).getName() + \"/\";\n\n				try {\n					File directory = new File(publicPath + folder);\n					if (!directory.exists()) {\n		System.out.println(\"criando diretório: \" + publicPath + folder);\n						directory.mkdirs();\n					}\n					else {\n		System.out.println(\"ja existe: \" + publicPath + folder);\n					}\n					File file = new File(publicPath + folder + filename);\n					//if (!file.exists()) {\n					PrintWriter pw = new PrintWriter(file);\n					pw.print(code);\n					pw.close();\n					//System.out.println(\"Wrote file: \" + caminhoAction + nomeArquivo);\n					//}\n					\n					action = new JSPAction(folder + filename);\n				} catch (FileNotFoundException e) {\n					System.err.println(\"java - Não achou arquivo: \" + e.getMessage());\n				}\n		 \n				doCallback(callback, action);\n			}\n		});\n	}\n\n	class JSPAction extends AbstractAction {\n		String filename;\n		public JSPAction (String filename) {\n			this.filename = filename;\n		}\n		public void act(Object target, Object callback) {\n			Object [] args = (Object []) target;\n			HttpServletRequest request = (HttpServletRequest) args[0];\n			HttpServletResponse response = (HttpServletResponse) args[1];\n			try {\n				request.setAttribute(\"agent\", this.getAgent());\n				request.getServletContext().getRequestDispatcher(\"/\" + filename).forward(request, response);\n			} catch (Exception e) {\n				this.getAgent().see(\"erroJSP\", new Object [] {request, response, e});\n			}\n			doCallback(callback, null);\n		}\n\n	}\n\n\n}','2021-02-06 23:36:16'),(24,'java.lang.String','baseUrl','2021-02-06 23:41:56'),(25,'java','package br.ifce.mind.actions.live;\n\nimport br.ifce.mind.actions.AbstractAction;\nimport javax.servlet.http.HttpServletRequest;\n\npublic class baseUrl extends AbstractAction {\n\n	public void act(Object object, Object callback) {\n		Object [] args = (Object []) object;\n		HttpServletRequest request = (HttpServletRequest) args[0];\n		String baseUrl, localName, localPort, contextPath;\n		localName = request.getServerName();\n		localPort = request.getLocalPort() + \"\";\n		contextPath = request.getContextPath();\n//		baseUrl = \"https://\" + localName + \":\" + localPort + contextPath  + \"/\";\n//		baseUrl = \"//\" + localName + contextPath  + \"/\";\n		baseUrl = \"/\";\n\n		doCallback(callback, baseUrl);\n	}}','2021-02-06 23:41:56'),(26,'java.lang.String','controllerUrl','2021-02-06 23:42:36'),(27,'java','package br.ifce.mind.actions.live;\n\nimport br.ifce.mind.NaiveMind;\nimport br.ifce.mind.actions.AbstractAction;\n\npublic class controllerUrl extends AbstractAction {\n\n	public void act(Object target, Object callback) {\n		NaiveMind controller = (NaiveMind) this.getAgent().getMind();\n		String controllerName = controller.getName().replace(\"Controller\", \"\");	\n		\n		this.getAgent().see(\"baseUrl\", target, new AbstractAction () {\n			public void act(Object t, Object c) {\n				String url = (String) t;\n				url += \"ce/\" + controllerName.replace(\"_\", \"/\") + \"/\";\n				doCallback(callback, url);\n			}\n		});\n	}\n\n}','2021-02-06 23:42:36'),(28,'jsp','<%@ page import=\"br.ifce.mind.Agent\" %>\n<%@ page import=\"br.ifce.mind.actions.AbstractAction\" %>\n<%\nAgent agent = (Agent) request.getAttribute(\"controller\");\nagent.see(\"baseUrl\", new Object [] {request}, new AbstractAction () {\n    public void act(Object t, Object c) {\n        request.setAttribute(\"baseUrl\", t);\n    }\n});\nagent.see(\"controllerUrl\", new Object [] {request}, new AbstractAction () {\n    public void act(Object t, Object c) {\n        request.setAttribute(\"controllerUrl\", t);\n    }\n});\n\nString actionName = (String) request.getAttribute(\"actionName\");\nString baseUrl = (String) request.getAttribute(\"baseUrl\");\nString controllerUrl = (String) request.getAttribute(\"controllerUrl\");\nString address = controllerUrl + actionName + \"/\";\n\n%>\n<!DOCTYPE html>\n<html>\n<head>\n	<title>LEA - Live Environment for Agents</title>\n	<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" />\n    <script\n  src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"\n  integrity=\"sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=\"\n  crossorigin=\"anonymous\"></script>\n    <script src=\"<%=baseUrl%>_js/brain.js\"></script>\n    <script src=\"<%=baseUrl%>_js/jsbrain.js\"></script>\n    <script src=\"<%=baseUrl%>_js/ajaxbrain.js\"></script>\n    <script src=\"<%=baseUrl%>_js/mind.js\"></script>\n    <script src=\"<%=baseUrl%>_js/agent.js\"></script>\n    <script src=\"<%=baseUrl%>_js/ceed.js\"></script>\n    <script src=\"<%=baseUrl%>_js/lea.js\"></script>\n    <script>\n    $(function () {\n        var baseUrl = \'<%=baseUrl%>\'\n        var controllerUrl = \'<%=controllerUrl%>\';\n        window[\'baseUrl\'] = baseUrl;\n        window[\'controllerUrl\'] = controllerUrl;\n        var pathname = window.location.pathname.split(\'/\');\n        var agentName = pathname.slice(3).join(\'/\');\n    	//var agentName = controllerUrl.split(\'/\').slice(-2, -1)[0];\n        window[\'page\'] = LEA.getAgent(agentName + \' Page\');\n        page.see(\'live\', \'body\', function () {\n    	    page.see(\'getAgent\', \'Ceed\', function (ceed) {\n            	window[\'ceed\'] = ceed;\n        	    ceed.see(\'set\', [\'parent\', ceed], function () {\n                	ceed.see(\'live\', \'body\', function (ok) {\n                    	ceed.see(\'refreshAgents\');\n                	    page.see(\'set\', [\'parent\', ceed], function () {\n                    	    page.see(\'study\', \'ask\', function () {\n                	            page.see(\'edit\');\n                	        });\n                	    });\n            	    });\n            	});\n                var controller = new HTTPAgent(controllerUrl);\n                window[\'controller\'] = controller;\n        	});\n        });\n    });\n	</script>\n	<style>\n	#auth {\n        position: sticky;\n        top: 0;\n        text-align: right;\n    }\n    \n    #license {\n        position: fixed;\n        bottom: 8px;\n        right: 8px;\n        text-align: right;\n        width: 420px;\n    }\n    body {\n        padding-bottom: 75px;\n    }\n	</style>\n</head>\n<body>\n    <div id=\"auth\">\n<%\ntry {\n    String username = request.getSession().getAttribute(\"username\").toString();\n%>\n        Welcome, <span><%=username%></span>!\n        <a href=\"<%=baseUrl%>ce/auth/logout\">Logout</a>\n<%\n}\ncatch (Exception e) {\n%>\n        <a href=\"<%=baseUrl%>ce/auth\">Login</a>\n<%\n}\n%>\n    </div>\n    <div id=\"license\">\n        <b><a target=\"_blank\" href=\"https://tiia.com.br/\">LEA - Live Environment for Agents</a></b> by <a href=\"mailto: macaroots@gmail.com\">Renato Lenz Costalima</a><br />\n        This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at <a rel=\"license\" href=\"https://mozilla.org/MPL/2.0/\">https://mozilla.org/MPL/2.0/</a>.\n    </div>\n</body>\n</html>','2021-02-06 23:44:30'),(29,'java','package br.ifce.mind.actions.live;\n\nimport br.ifce.mind.actions.AbstractAction;\nimport javax.servlet.http.HttpServletRequest;\n\npublic class baseUrl extends AbstractAction {\n\n	public void act(Object object, Object callback) {\n		Object [] args = (Object []) object;\n		HttpServletRequest request = (HttpServletRequest) args[0];\n		String baseUrl, localName, localPort, contextPath;\n		localName = request.getServerName();\n		localPort = request.getLocalPort() + \"\";\n		contextPath = request.getContextPath();\n//		baseUrl = \"https://\" + localName + \":\" + localPort + contextPath  + \"/\";\n//		baseUrl = \"//\" + localName + contextPath  + \"/\";\n		baseUrl = contextPath;\n\n		doCallback(callback, baseUrl);\n	}}','2021-02-06 23:46:53'),(30,'java','package br.ifce.mind.actions.live;\n\nimport br.ifce.mind.actions.AbstractAction;\nimport javax.servlet.http.HttpServletRequest;\n\npublic class baseUrl extends AbstractAction {\n\n	public void act(Object object, Object callback) {\n		Object [] args = (Object []) object;\n		HttpServletRequest request = (HttpServletRequest) args[0];\n		String baseUrl, localName, localPort, contextPath;\n		localName = request.getServerName();\n		localPort = request.getLocalPort() + \"\";\n		contextPath = \"/LEA\";\n//		baseUrl = \"https://\" + localName + \":\" + localPort + contextPath  + \"/\";\n//		baseUrl = \"//\" + localName + contextPath  + \"/\";\n		baseUrl = contextPath + \"/\";\n\n		doCallback(callback, baseUrl);\n	}}','2021-02-06 23:47:50'),(31,'jsp','<%@ page import=\"br.ifce.mind.Agent\" %>\n<%@ page import=\"br.ifce.mind.actions.AbstractAction\" %>\n<%\nAgent agent = (Agent) request.getAttribute(\"controller\");\nagent.see(\"baseUrl\", new Object [] {request}, new AbstractAction () {\n    public void act(Object t, Object c) {\n        request.setAttribute(\"baseUrl\", t);\n    }\n});\nagent.see(\"controllerUrl\", new Object [] {request}, new AbstractAction () {\n    public void act(Object t, Object c) {\n        request.setAttribute(\"controllerUrl\", t);\n    }\n});\n\nString actionName = (String) request.getAttribute(\"actionName\");\nString baseUrl = (String) request.getAttribute(\"baseUrl\");\nString controllerUrl = (String) request.getAttribute(\"controllerUrl\");\nString address = controllerUrl + actionName + \"/\";\n\n%>\n<!DOCTYPE html>\n<html>\n<head>\n	<title>LEA - Live Environment for Agents</title>\n	<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" />\n    <script\n  src=\"https://code.jquery.com/jquery-1.12.4.min.js\"\n  integrity=\"sha256-ZosEbRLbNQzLpnKIkEdrPv7lOy9C27hHQ+Xp8a4MxAQ=\"\n  crossorigin=\"anonymous\"></script>\n    <script src=\"<%=baseUrl%>_js/brain.js\"></script>\n    <script src=\"<%=baseUrl%>_js/jsbrain.js\"></script>\n    <script src=\"<%=baseUrl%>_js/ajaxbrain.js\"></script>\n    <script src=\"<%=baseUrl%>_js/mind.js\"></script>\n    <script src=\"<%=baseUrl%>_js/agent.js\"></script>\n    <script src=\"<%=baseUrl%>_js/ceed.js\"></script>\n    <script src=\"<%=baseUrl%>_js/lea.js\"></script>\n    <script>\n    $(function () {\n        var baseUrl = \'<%=baseUrl%>\'\n        var controllerUrl = \'<%=controllerUrl%>\';\n        window[\'baseUrl\'] = baseUrl;\n        window[\'controllerUrl\'] = controllerUrl;\n        var pathname = window.location.pathname.split(\'/\');\n        var agentName = pathname.slice(3).join(\'/\');\n    	//var agentName = controllerUrl.split(\'/\').slice(-2, -1)[0];\n        window[\'page\'] = LEA.getAgent(agentName + \' Page\');\n        page.see(\'live\', \'body\', function () {\n    	    page.see(\'getAgent\', \'Ceed\', function (ceed) {\n            	window[\'ceed\'] = ceed;\n        	    ceed.see(\'set\', [\'parent\', ceed], function () {\n                	ceed.see(\'live\', \'body\', function (ok) {\n                    	ceed.see(\'refreshAgents\');\n                	    page.see(\'set\', [\'parent\', ceed], function () {\n                    	    page.see(\'study\', \'ask\', function () {\n                	            page.see(\'edit\');\n                	        });\n                	    });\n            	    });\n            	});\n                var controller = new HTTPAgent(controllerUrl);\n                window[\'controller\'] = controller;\n        	});\n        });\n    });\n	</script>\n	<style>\n	#auth {\n        position: sticky;\n        top: 0;\n        text-align: right;\n    }\n    \n    #license {\n        position: fixed;\n        bottom: 8px;\n        right: 8px;\n        text-align: right;\n        width: 420px;\n    }\n    body {\n        padding-bottom: 75px;\n    }\n	</style>\n</head>\n<body>\n    <div id=\"auth\">\n<%\ntry {\n    String username = request.getSession().getAttribute(\"username\").toString();\n%>\n        Welcome, <span><%=username%></span>!\n        <a href=\"<%=baseUrl%>ce/auth/logout\">Logout</a>\n<%\n}\ncatch (Exception e) {\n%>\n        <a href=\"<%=baseUrl%>ce/auth\">Login</a>\n<%\n}\n%>\n    </div>\n    <div id=\"license\">\n        <b><a target=\"_blank\" href=\"https://tiia.com.br/\">LEA - Live Environment for Agents</a></b> by <a href=\"mailto: macaroots@gmail.com\">Renato Lenz Costalima</a><br />\n        This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at <a rel=\"license\" href=\"https://mozilla.org/MPL/2.0/\">https://mozilla.org/MPL/2.0/</a>.\n    </div>\n</body>\n</html>','2021-02-06 23:48:54'),(32,'java.lang.String','BrainController','2021-02-07 00:07:54'),(33,'java.lang.String','reason','2021-02-07 00:07:54'),(34,'java','package br.ifce.mind.actions.live;\n\nimport br.ifce.mind.actions.AbstractAction;\nimport br.ifce.brain.Brain;\nimport br.ifce.brain.Link;\n\nimport java.util.List;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.json.JSONArray;\n\npublic class reason extends AbstractAction {\n\n	public void act(Object target, Object callback) {\n		Object [] args = (Object []) target;\n		HttpServletRequest request = (HttpServletRequest) args[0];\n		HttpServletResponse response = (HttpServletResponse) args[1];\n\n		this.getAgent().see(\"getLinkFromRequest\", request, new AbstractAction () {\n			public void act(Object t, Object c) {\n				Link link = (Link) t;\n				this.getAgent().see(\"getLibraries\", null, new AbstractAction () {\n					public void act(Object t, Object c) {\n						Brain brain = ((List<Brain>) t).get(0);\n						List<Link> links = brain.reason(link);\n\n						JSONArray json = new JSONArray();\n\n						for (Link l: links) {\n							json.put(l.toJSONObject());\n						}\n						try {\n							response.setContentType(\"application/json\");\n							response.getWriter().println(json.toString());\n						} catch(Exception e) {\n							System.out.println(\"erroBrainReason: \" + e);\n						}\n					}\n				});\n			}\n		});\n\n	}\n\n}','2021-02-07 00:07:54'),(35,'java.lang.String','getLinkFromRequest','2021-02-07 00:08:42'),(36,'java','package br.ifce.mind.actions.live;\n\nimport br.ifce.mind.actions.AbstractAction;\nimport br.ifce.brain.Symbol;\nimport br.ifce.brain.Link;\n\nimport java.util.Map;\nimport java.util.HashMap;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.json.JSONObject;\nimport org.json.JSONException;\nimport org.json.HTTP;\n\nimport java.io.IOException;\nimport java.io.BufferedReader;\n\npublic class getLinkFromRequest extends AbstractAction {\n\n	public void act(Object target, Object callback) {\n		HttpServletRequest request = (HttpServletRequest) target;\n\n		Symbol a, b, r;\n\n		if (!request.getParameterMap().containsKey(\"a\")) {\n			a = new Symbol();\n		}\n		else {\n			a = new Symbol(Integer.parseInt(request.getParameter(\"a\")));\n		}\n		if (!request.getParameterMap().containsKey(\"b\")) {\n			b = new Symbol();\n		}\n		else {\n			b = new Symbol(Integer.parseInt(request.getParameter(\"b\")));\n		}\n		if (!request.getParameterMap().containsKey(\"r\")) {\n			r = new Symbol();\n		}\n		else {\n			r = new Symbol(request.getParameter(\"r\"));\n		}\n		\n		Map<String, Symbol> symbols = new HashMap<String, Symbol>();\n		symbols.put(\"a\", a);\n		symbols.put(\"b\", b);\n		symbols.put(\"r\", r);\n		Link link = new Link(a, r, b);\n		for (String key: symbols.keySet()) {\n			Symbol symbol = symbols.get(key);\n			if (request.getParameterMap().containsKey(key + \"[id]\")) {\n			    if (!\"\".equals(request.getParameter(key + \"[id]\"))) {\n				    symbol.setId(new Integer(request.getParameter(key + \"[id]\")));\n			    }\n			}	\n			if (request.getParameterMap().containsKey(key + \"[z]\")) {\n			    if (!\"\".equals(request.getParameter(key + \"[z]\"))) {\n    				symbol.setType(request.getParameter(key + \"[z]\"));\n			    }\n			}\n			if (request.getParameterMap().containsKey(key + \"[info]\")) {\n			    if (!\"\".equals(request.getParameter(key + \"[info]\"))) {\n    				symbol.setInfo(request.getParameter(key + \"[info]\"));\n			    }\n			}\n		}\n		\n		doCallback(callback, link);\n	}\n\n}','2021-02-07 00:08:42'),(37,'java','/**\n * LEA - Live Editing Applications\n * by Renato Lenz Costalima\n * This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/.\n * Permissions beyond the scope of this license may be available at macaroots@gmail.com.\n */\npackage br.ifce.mind.actions.live;\n\nimport br.ifce.mind.actions.AbstractAction;\nimport br.ifce.mind.Agent;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\npublic class EmptyAction extends AbstractAction {\n\n	public void act(Object target, Object callback) {		\n		Object [] args = (Object []) target;\n		HttpServletRequest request = (HttpServletRequest) args[0];\n		HttpServletResponse response = (HttpServletResponse) args[1];\n        \n		Agent agent = this.getAgent();\n		agent.see(\"study\", \"reason\");\n		agent.see(\"study\", \"getLinkFromRequest\");\n        \n		doCallback(callback, null);\n	}\n\n}','2021-02-07 00:14:19'),(38,'java.lang.String','wask','2021-02-07 01:07:44'),(39,'java','package br.ifce.mind.actions.live;\n\nimport br.ifce.mind.actions.AbstractAction;\nimport br.ifce.mind.Agent;\nimport br.ifce.brain.Symbol;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport java.util.List;\n\npublic class ask extends AbstractAction {\n\n	public void act(Object object, Object callback) {\n		boolean asked = true;\n		Agent wantsToKnowTmp = null;\n		String word = null, address, z, info;\n\n		Agent agent = this.getAgent();\n		Object [] httpArgsTmp = null;\n		HttpServletRequest requestTmp = null;\n		try {\n			// talvez esse bloco tivesse pensando em receber os pedidos dos agentes filhos...\n			/*/\n			Object [] a = (Object []) object;\n			Symbol perception = (Symbol) a[0];\n			wantsToKnowTmp = (Agent) a[1];\n			/*/\n			Symbol perception = (Symbol) object;\n			wantsToKnowTmp = agent;\n			/**/\n			httpArgsTmp = (Object []) perception.getInfo();\n			word = (String) perception.getType();\n		} catch (Exception e) {\n			try {\n				httpArgsTmp = (Object []) object;\n				requestTmp = (HttpServletRequest) httpArgsTmp[0];\n				word = requestTmp.getParameter(\"w\");\n				wantsToKnowTmp = agent;\n			} catch (Exception e2) {\n				asked = false;\n			}\n		}\n		Agent wantsToKnow = wantsToKnowTmp;\n		String concept = word;\n		Object [] httpArgs = httpArgsTmp;\n		HttpServletRequest request = (HttpServletRequest) httpArgs[0];\n		agent.see(\"baseUrl\", httpArgs, new AbstractAction () {\n			public void act(Object t, Object c) {\n				request.setAttribute(\"baseUrl\", t);\n			}\n		});\n		agent.see(\"controllerUrl\", httpArgs, new AbstractAction () {\n			public void act(Object target, Object c) {\n				String address = (String) target;\n\n				request.setAttribute(\"word\", concept);\n				request.setAttribute(\"agentName\", wantsToKnow.toString());\n				request.setAttribute(\"controllerUrl\", address);\n				request.setAttribute(\"actionAddress\", address + \"_hearAnswer\");\n				agent.see(\"askView\", httpArgs);\n/*\n				wantsToKnow.see(\"read\", concept, new AbstractAction() {\n					public void act(Object object, Object callback2) {\n						List<Symbol> representations = (List<Symbol>) object;\n						if (representations != null && !representations.isEmpty()) {\n							Symbol representation = representations.get(representations.size() - 1);\n							request.setAttribute(\"z\", representation.getType().toString());\n							request.setAttribute(\"info\", representation.getInfo().toString());\n							agent.see(\"askView\", httpArgs);\n						}\n						else {\n							wantsToKnow.see(\"read\", \"EmptyAction\", new AbstractAction() {\n								public void act(Object object, Object callback2) {\n									String z = \"javaClass\";\n									String info = \"\";\n									List<Symbol> representations = (List<Symbol>) object;\n									if (representations != null && !representations.isEmpty()) {\n										z = representations.get(representations.size() - 1).getType().toString();\n										info = representations.get(representations.size() - 1).getInfo().toString();\n										info = info.replaceAll(\"EmptyAction\", concept);\n									}\n									request.setAttribute(\"z\", z);\n									request.setAttribute(\"info\", info);\n									agent.see(\"askView\", httpArgs);\n								}\n							});\n						}\n					}\n				});\n			*/\n			}\n		});\n\n	}\n\n}','2021-02-07 01:07:44'),(40,'java.lang.String','whearAnswer','2021-02-07 01:09:02'),(41,'java','package br.ifce.mind.actions.live;\n\nimport br.ifce.mind.actions.AbstractAction;\nimport br.ifce.mind.Agent;\nimport br.ifce.brain.Symbol;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\npublic class hearAnswer extends AbstractAction {\n\n	public void act(Object object, Object callback) {\nSystem.out.println(\"web hearing4\");\n		Agent agent = this.getAgent();\n		try {\n			Object [] args = (Object[]) object;\n			HttpServletRequest request = (HttpServletRequest) args[0];\n			HttpServletResponse response = (HttpServletResponse) args[1];\n\n			String word, z, info;\n			word = request.getParameter(\"word\");\n			z = request.getParameter(\"z\");\n			info = request.getParameter(\"info\");\n\n			Symbol answer = new Symbol(z, info);\n\n			agent.see(\"hearAnswer\", new Object [] {word, answer}, new AbstractAction () {\n				public void act(Object t, Object c) {\n					try {\n						response.getWriter().println(\"{ok: \" + t + \"}\");\n					} catch (Exception e) {}\n					doCallback(callback, t);\n				}\n			});\n\n		} catch (Exception e) {\n			agent.see(\"hearAnswer\", object, callback);\n		}\n	}\n\n}','2021-02-07 01:09:02'),(42,'java.lang.String','askView','2021-02-07 01:12:31'),(43,'java','<%\nString agentName = (String) request.getAttribute(\"agentName\");\nString word = (String) request.getAttribute(\"word\");\nString baseUrl = (String) request.getAttribute(\"baseUrl\");\nString controllerUrl = (String) request.getAttribute(\"controllerUrl\");\nString actionAddress = (String) request.getAttribute(\"actionAddress\");\n%>\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n	<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n	<title>LEA - <%=agentName%> asks \"<%=word%>?\"</title>\n	<script\n  src=\"https://code.jquery.com/jquery-1.12.4.min.js\"\n  integrity=\"sha256-ZosEbRLbNQzLpnKIkEdrPv7lOy9C27hHQ+Xp8a4MxAQ=\"\n  crossorigin=\"anonymous\"></script>\n	<script src=\"https://pagecdn.io/lib/ace/1.4.12/ace.js\"></script>\n	<script src=\"<%=baseUrl%>_js/agent.js\"></script>\n	<script>\n	$(function() {\n		var editor = ace.edit(\"info\");\n		editor.getSession().setMode(\"ace/mode/java\");\n		var type = $(\'input[name=z]\');\n		$(\'form\').submit(function() {\n			$(\'textarea[name=info]\').val(editor.getValue());\n			return true;\n		});\n		var agent = new HTTPAgent(\'<%=controllerUrl%>\');\n		agent.see(\'wread\', {w: \'<%=word%>\'}, function (r) {\n			if (r.z != \'error\') {\n				type.val(r.z);\n				editor.getSession().setMode(\"ace/mode/\" + r.z.replace(\'class\', \'\'));\n				editor.setValue(r.info);\n			}\n			else {\n				agent.see(\'wread\', {w: \'EmptyAction\'}, function (r) {\n					if (r.z != \'error\') {\n						type.val(r.z);\n						editor.setValue(r.info);\n					}\n				}, \'json\');					\n			}\n		}, \'json\');\n	});\n	</script>\n</head>\n<body>\n	<form action=\"<%=actionAddress%>\" method=\"post\">\n	<div><%=agentName%> - What\'s the meaning of <input name=\"word\" value=\"<%=word%>\" type=\"text\" />?</div>\n	<textarea name=\"info\" cols=\"70\" rows=\"20\" style=\"display: none;\"></textarea>\n	<div id=\"info\" style=\"width: 600px; height: 400px; float: left;\"></div>\n	<input name=\"z\" type=\"text\" /><br />\n	<input type=\"submit\" value=\"ok\" />\n	<input type=\"button\" value=\"cancel\" onClick=\"$(this).closest(\'form\').remove();\" />\n	</form>\n</body>\n</html>','2021-02-07 01:12:31'),(45,'java.lang.String','wread','2021-02-07 01:14:49'),(46,'java','package br.ifce.mind.actions.live;\n\nimport br.ifce.mind.actions.AbstractAction;\nimport br.ifce.mind.Agent;\nimport br.ifce.brain.Symbol;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport java.util.List;\n\npublic class controller.wread extends AbstractAction {\n\n	public void act(Object target, Object callback) {		\n		Object [] args = (Object []) target;\n		HttpServletRequest request = (HttpServletRequest) args[0];\n		HttpServletResponse response = (HttpServletResponse) args[1];\n        \n		Agent agent = this.getAgent();\n		String word = request.getParameter(\"w\");\n\n		agent.see(\"read\", word, new AbstractAction () {\n		    public void act(Object t, Object c) {\n		        List<Symbol> representations;\n        		Symbol representation;\n        		representations = (List<Symbol>) t;\n        		if (representations != null && !representations.isEmpty()) {\n        			representation = representations.get(representations.size() - 1);\n        		}\n        		else {\n        		    representation = new Symbol(0, \"error\", \"Word not found!\");\n        		}\n        \n                try{\n                    response.getWriter().println(representation.toJSON());\n                    response.setContentType(\"application/json\");\n                }\n                catch (Exception e) {\n                    \n                }\n        		doCallback(callback, representation);\n		    }\n		});\n	}\n\n}','2021-02-07 01:14:49'),(47,'jsp','<%\nString agentName = (String) request.getAttribute(\"agentName\");\nString word = (String) request.getAttribute(\"word\");\nString baseUrl = (String) request.getAttribute(\"baseUrl\");\nString controllerUrl = (String) request.getAttribute(\"controllerUrl\");\nString actionAddress = (String) request.getAttribute(\"actionAddress\");\n%>\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n	<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n	<title>LEA - <%=agentName%> asks \"<%=word%>?\"</title>\n	<script\n  src=\"https://code.jquery.com/jquery-1.12.4.min.js\"\n  integrity=\"sha256-ZosEbRLbNQzLpnKIkEdrPv7lOy9C27hHQ+Xp8a4MxAQ=\"\n  crossorigin=\"anonymous\"></script>\n	<script src=\"https://pagecdn.io/lib/ace/1.4.12/ace.js\"></script>\n	<script src=\"<%=baseUrl%>_js/agent.js\"></script>\n	<script>\n	$(function() {\n		var editor = ace.edit(\"info\");\n		editor.getSession().setMode(\"ace/mode/java\");\n		var type = $(\'input[name=z]\');\n		$(\'form\').submit(function() {\n			$(\'textarea[name=info]\').val(editor.getValue());\n			return true;\n		});\n		var agent = new HTTPAgent(\'<%=controllerUrl%>\');\n		agent.see(\'<%=actionAddress%>\', {w: \'<%=word%>\'}, function (r) {\n			if (r.z != \'error\') {\n				type.val(r.z);\n				editor.getSession().setMode(\"ace/mode/\" + r.z.replace(\'class\', \'\'));\n				editor.setValue(r.info);\n			}\n			else {\n				agent.see(\'wread\', {w: \'EmptyAction\'}, function (r) {\n					if (r.z != \'error\') {\n						type.val(r.z);\n						editor.setValue(r.info);\n					}\n				}, \'json\');					\n			}\n		}, \'json\');\n	});\n	</script>\n</head>\n<body>\n	<form action=\"<%=actionAddress%>\" method=\"post\">\n	<div><%=agentName%> - What\'s the meaning of <input name=\"word\" value=\"<%=word%>\" type=\"text\" />?</div>\n	<textarea name=\"info\" cols=\"70\" rows=\"20\" style=\"display: none;\"></textarea>\n	<div id=\"info\" style=\"width: 600px; height: 400px; float: left;\"></div>\n	<input name=\"z\" type=\"text\" /><br />\n	<input type=\"submit\" value=\"ok\" />\n	<input type=\"button\" value=\"cancel\" onClick=\"$(this).closest(\'form\').remove();\" />\n	</form>\n</body>\n</html>','2021-02-07 01:20:25'),(48,'jsp','<%\nString agentName = (String) request.getAttribute(\"agentName\");\nString word = (String) request.getAttribute(\"word\");\nString baseUrl = (String) request.getAttribute(\"baseUrl\");\nString controllerUrl = (String) request.getAttribute(\"controllerUrl\");\nString actionAddress = (String) request.getAttribute(\"actionAddress\");\n%>\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n	<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n	<title>LEA - <%=agentName%> asks \"<%=word%>?\"</title>\n	<script\n  src=\"https://code.jquery.com/jquery-1.12.4.min.js\"\n  integrity=\"sha256-ZosEbRLbNQzLpnKIkEdrPv7lOy9C27hHQ+Xp8a4MxAQ=\"\n  crossorigin=\"anonymous\"></script>\n	<script src=\"https://pagecdn.io/lib/ace/1.4.12/ace.js\"></script>\n	<script src=\"<%=baseUrl%>_js/agent.js\"></script>\n	<script>\n	$(function() {\n		var editor = ace.edit(\"info\");\n		editor.getSession().setMode(\"ace/mode/java\");\n		var type = $(\'input[name=z]\');\n		$(\'form\').submit(function() {\n			$(\'textarea[name=info]\').val(editor.getValue());\n			return true;\n		});\n		var agent = new HTTPAgent(\'<%=controllerUrl%>\');\n		agent.see(\'_read\', {w: \'<%=word%>\'}, function (r) {\n			if (r.z != \'error\') {\n				type.val(r.z);\n				editor.getSession().setMode(\"ace/mode/\" + r.z.replace(\'class\', \'\'));\n				editor.setValue(r.info);\n			}\n			else {\n				agent.see(\'wread\', {w: \'EmptyAction\'}, function (r) {\n					if (r.z != \'error\') {\n						type.val(r.z);\n						editor.setValue(r.info);\n					}\n				}, \'json\');					\n			}\n		}, \'json\');\n	});\n	</script>\n</head>\n<body>\n	<form action=\"<%=actionAddress%>\" method=\"post\">\n	<div><%=agentName%> - What\'s the meaning of <input name=\"word\" value=\"<%=word%>\" type=\"text\" />?</div>\n	<textarea name=\"info\" cols=\"70\" rows=\"20\" style=\"display: none;\"></textarea>\n	<div id=\"info\" style=\"width: 600px; height: 400px; float: left;\"></div>\n	<input name=\"z\" type=\"text\" /><br />\n	<input type=\"submit\" value=\"ok\" />\n	<input type=\"button\" value=\"cancel\" onClick=\"$(this).closest(\'form\').remove();\" />\n	</form>\n</body>\n</html>','2021-02-07 01:26:53'),(49,'java','package br.ifce.mind.actions.live;\n\nimport br.ifce.mind.actions.AbstractAction;\nimport br.ifce.mind.Agent;\nimport br.ifce.brain.Symbol;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport java.util.List;\n\npublic class ask extends AbstractAction {\n\n	public void act(Object object, Object callback) {\n		boolean asked = true;\n		Agent wantsToKnowTmp = null;\n		String word = null, address, type, info;\n\n		Agent agent = this.getAgent();\n		Object [] httpArgsTmp = null;\n		HttpServletRequest requestTmp = null;\n		try {\n			// talvez esse bloco tivesse pensando em receber os pedidos dos agentes filhos...\n			/*/\n			Object [] a = (Object []) object;\n			Symbol perception = (Symbol) a[0];\n			wantsToKnowTmp = (Agent) a[1];\n			/*/\n			Symbol perception = (Symbol) object;\n			wantsToKnowTmp = agent;\n			/**/\n			httpArgsTmp = (Object []) perception.getInfo();\n			word = (String) perception.getType();\n		} catch (Exception e) {\n			try {\n				httpArgsTmp = (Object []) object;\n				requestTmp = (HttpServletRequest) httpArgsTmp[0];\n				word = requestTmp.getParameter(\"w\");\n				wantsToKnowTmp = agent;\n			} catch (Exception e2) {\n				asked = false;\n			}\n		}\n		Agent wantsToKnow = wantsToKnowTmp;\n		String concept = word;\n		Object [] httpArgs = httpArgsTmp;\n		HttpServletRequest request = (HttpServletRequest) httpArgs[0];\n		agent.see(\"baseUrl\", httpArgs, new AbstractAction () {\n			public void act(Object t, Object c) {\n				request.setAttribute(\"baseUrl\", t);\n			}\n		});\n		agent.see(\"controllerUrl\", httpArgs, new AbstractAction () {\n			public void act(Object target, Object c) {\n				String address = (String) target;\n\n				request.setAttribute(\"word\", concept);\n				request.setAttribute(\"agentName\", wantsToKnow.toString());\n				request.setAttribute(\"controllerUrl\", address);\n				request.setAttribute(\"actionAddress\", address + \"_hearAnswer\");\n				agent.see(\"askView\", httpArgs);\n/*\n				wantsToKnow.see(\"read\", concept, new AbstractAction() {\n					public void act(Object object, Object callback2) {\n						List<Symbol> representations = (List<Symbol>) object;\n						if (representations != null && !representations.isEmpty()) {\n							Symbol representation = representations.get(representations.size() - 1);\n							request.setAttribute(\"type\", representation.getType().toString());\n							request.setAttribute(\"info\", representation.getInfo().toString());\n							agent.see(\"askView\", httpArgs);\n						}\n						else {\n							wantsToKnow.see(\"read\", \"EmptyAction\", new AbstractAction() {\n								public void act(Object object, Object callback2) {\n									String type = \"java\";\n									String info = \"\";\n									List<Symbol> representations = (List<Symbol>) object;\n									if (representations != null && !representations.isEmpty()) {\n										type = representations.get(representations.size() - 1).getType().toString();\n										info = representations.get(representations.size() - 1).getInfo().toString();\n										info = info.replaceAll(\"EmptyAction\", concept);\n									}\n									request.setAttribute(\"type\", type);\n									request.setAttribute(\"info\", info);\n									agent.see(\"askView\", httpArgs);\n								}\n							});\n						}\n					}\n				});\n			*/\n			}\n		});\n\n	}\n\n}','2021-02-07 01:29:43'),(50,'jsp','<%\nString agentName = (String) request.getAttribute(\"agentName\");\nString word = (String) request.getAttribute(\"word\");\nString baseUrl = (String) request.getAttribute(\"baseUrl\");\nString controllerUrl = (String) request.getAttribute(\"controllerUrl\");\nString actionAddress = (String) request.getAttribute(\"actionAddress\");\n%>\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n	<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n	<title>LEA - <%=agentName%> asks \"<%=word%>?\"</title>\n	<script\n  src=\"https://code.jquery.com/jquery-1.12.4.min.js\"\n  integrity=\"sha256-ZosEbRLbNQzLpnKIkEdrPv7lOy9C27hHQ+Xp8a4MxAQ=\"\n  crossorigin=\"anonymous\"></script>\n	<script src=\"https://pagecdn.io/lib/ace/1.4.12/ace.js\"></script>\n	<script src=\"<%=baseUrl%>_js/agent.js\"></script>\n	<script>\n	$(function() {\n		var editor = ace.edit(\"info\");\n		editor.getSession().setMode(\"ace/mode/java\");\n		var type = $(\'input[name=type]\');\n		$(\'form\').submit(function() {\n			$(\'textarea[name=info]\').val(editor.getValue());\n			return true;\n		});\n		var agent = new HTTPAgent(\'<%=controllerUrl%>\');\n		agent.see(\'_read\', {w: \'<%=word%>\'}, function (r) {\n			if (r.type != \'error\') {\n				type.val(r.type);\n				editor.getSession().setMode(\"ace/mode/\" + r.type.replace(\'class\', \'\'));\n				editor.setValue(r.info);\n			}\n			else {\n				agent.see(\'_read\', {w: \'EmptyAction\'}, function (r) {\n					if (r.type != \'error\') {\n						type.val(r.type);\n						editor.setValue(r.info);\n					}\n				}, \'json\');					\n			}\n		}, \'json\');\n	});\n	</script>\n</head>\n<body>\n	<form action=\"<%=actionAddress%>\" method=\"post\">\n	<div><%=agentName%> - What\'s the meaning of <input name=\"word\" value=\"<%=word%>\" type=\"text\" />?</div>\n	<textarea name=\"info\" cols=\"70\" rows=\"20\" style=\"display: none;\"></textarea>\n	<div id=\"info\" style=\"width: 600px; height: 400px; float: left;\"></div>\n	<input name=\"type\" type=\"text\" /><br />\n	<input type=\"submit\" value=\"ok\" />\n	<input type=\"button\" value=\"cancel\" onClick=\"$(this).closest(\'form\').remove();\" />\n	</form>\n</body>\n</html>','2021-02-07 01:31:14'),(51,'java','package br.ifce.mind.actions.live;\n\nimport br.ifce.mind.actions.AbstractAction;\nimport br.ifce.mind.Agent;\nimport br.ifce.brain.Symbol;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\npublic class hearAnswer extends AbstractAction {\n\n	public void act(Object object, Object callback) {\nSystem.out.println(\"web hearing4\");\n		Agent agent = this.getAgent();\n		try {\n			Object [] args = (Object[]) object;\n			HttpServletRequest request = (HttpServletRequest) args[0];\n			HttpServletResponse response = (HttpServletResponse) args[1];\n\n			String word, z, info;\n			word = request.getParameter(\"word\");\n			z = request.getParameter(\"type\");\n			info = request.getParameter(\"info\");\n\n			Symbol answer = new Symbol(z, info);\n\n			agent.see(\"hearAnswer\", new Object [] {word, answer}, new AbstractAction () {\n				public void act(Object t, Object c) {\n					try {\n						response.getWriter().println(\"{ok: \" + t + \"}\");\n					} catch (Exception e) {}\n					doCallback(callback, t);\n				}\n			});\n\n		} catch (Exception e) {\n			agent.see(\"hearAnswer\", object, callback);\n		}\n	}\n\n}','2021-02-07 01:31:44'),(52,'java','/**\r\n * MInD - Model for Intelligence Development\r\n * by Renato Lenz Costalima\r\n * This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. \r\n */\r\npackage br.ifce.mind.action.live;\r\n\r\nimport br.ifce.mind.actions.AbstractAction;\r\n\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\npublic class Index extends AbstractAction {\r\n\r\n	public void act(Object _args, Object callback) {\r\n		try {\r\n			Object[] args = (Object[]) _args;\r\n			HttpServletRequest request = (HttpServletRequest) args[0];\r\n			HttpServletResponse response = (HttpServletResponse) args[1];\r\n			List<Object []> questions = (List<Object []>) request.getServletContext().getAttribute(\"questions\");\r\n			response.getWriter().println(\"OlÃ¡, tia Gessica!!!\");\r\n			for (Object [] question: questions) {\r\n				response.getWriter().println(question[0] + \": \" + question[1]);\r\n			}\r\n		} catch (IOException e) {}\r\n		\r\n		callback(callback, null);\r\n	}\r\n\r\n}\r\n','2021-02-07 01:39:07'),(53,'java.lang.String','wstudy','2021-02-07 01:45:27'),(54,'java','/**\n * LEA - Live Editing Applications\n * by Renato Lenz Costalima\n * This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/.\n * Permissions beyond the scope of this license may be available at macaroots@gmail.com.\n */\npackage br.ifce.mind.actions.live;\n\nimport br.ifce.mind.Agent;\nimport br.ifce.mind.actions.AbstractAction;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\npublic class WStudy extends AbstractAction {\n\n	public void act(Object target, Object callback) {		\n		Object [] args = (Object []) target;\n		HttpServletRequest request = (HttpServletRequest) args[0];\n		HttpServletResponse response = (HttpServletResponse) args[1];\n        \n		Agent agent = this.getAgent();\n		agent.see(\"study\", request.getParameter(\"k\"), new AbstractAction () {\n			public void act(Object t, Object c) {\n				try {\n					response.getWriter().println(\"{ok: \" + t + \"}\");\n				} catch (Exception e) {}\n				doCallback(callback, t);\n			}\n		});\n	}\n\n}','2021-02-07 01:45:27'),(55,'java','package br.ifce.mind.actions.live;\n\nimport br.ifce.mind.actions.AbstractAction;\nimport br.ifce.mind.Agent;\nimport br.ifce.brain.Symbol;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\npublic class hearAnswer extends AbstractAction {\n\n	public void act(Object object, Object callback) {\nSystem.out.println(\"web hearing4\");\n		Agent agent = this.getAgent();\n		try {\n			Object [] args = (Object[]) object;\n			HttpServletRequest request = (HttpServletRequest) args[0];\n			HttpServletResponse response = (HttpServletResponse) args[1];\n\n			String word, z, info;\n			word = request.getParameter(\"key\");\n			z = request.getParameter(\"type\");\n			info = request.getParameter(\"info\");\n\n			Symbol answer = new Symbol(z, info);\n\n			agent.see(\"hearAnswer\", new Object [] {word, answer}, new AbstractAction () {\n				public void act(Object t, Object c) {\n					try {\n						response.getWriter().println(\"{ok: \" + t + \"}\");\n					} catch (Exception e) {}\n					doCallback(callback, t);\n				}\n			});\n\n		} catch (Exception e) {\n			agent.see(\"hearAnswer\", object, callback);\n		}\n	}\n\n}','2021-02-07 01:46:27'),(56,'java','package br.ifce.mind.actions.live;\n\nimport br.ifce.mind.actions.AbstractAction;\nimport br.ifce.mind.Agent;\nimport br.ifce.brain.Symbol;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport java.util.List;\n\npublic class ask extends AbstractAction {\n\n	public void act(Object object, Object callback) {\n		boolean asked = true;\n		Agent wantsToKnowTmp = null;\n		String word = null, address, type, info;\n\n		Agent agent = this.getAgent();\n		Object [] httpArgsTmp = null;\n		HttpServletRequest requestTmp = null;\n		try {\n			// talvez esse bloco tivesse pensando em receber os pedidos dos agentes filhos...\n			/*/\n			Object [] a = (Object []) object;\n			Symbol perception = (Symbol) a[0];\n			wantsToKnowTmp = (Agent) a[1];\n			/*/\n			Symbol perception = (Symbol) object;\n			wantsToKnowTmp = agent;\n			/**/\n			httpArgsTmp = (Object []) perception.getInfo();\n			word = (String) perception.getType();\n		} catch (Exception e) {\n			try {\n				httpArgsTmp = (Object []) object;\n				requestTmp = (HttpServletRequest) httpArgsTmp[0];\n				word = requestTmp.getParameter(\"k\");\n				wantsToKnowTmp = agent;\n			} catch (Exception e2) {\n				asked = false;\n			}\n		}\n		Agent wantsToKnow = wantsToKnowTmp;\n		String concept = word;\n		Object [] httpArgs = httpArgsTmp;\n		HttpServletRequest request = (HttpServletRequest) httpArgs[0];\n		agent.see(\"baseUrl\", httpArgs, new AbstractAction () {\n			public void act(Object t, Object c) {\n				request.setAttribute(\"baseUrl\", t);\n			}\n		});\n		agent.see(\"controllerUrl\", httpArgs, new AbstractAction () {\n			public void act(Object target, Object c) {\n				String address = (String) target;\n\n				request.setAttribute(\"word\", concept);\n				request.setAttribute(\"agentName\", wantsToKnow.toString());\n				request.setAttribute(\"controllerUrl\", address);\n				request.setAttribute(\"actionAddress\", address + \"_hearAnswer\");\n				agent.see(\"askView\", httpArgs);\n/*\n				wantsToKnow.see(\"read\", concept, new AbstractAction() {\n					public void act(Object object, Object callback2) {\n						List<Symbol> representations = (List<Symbol>) object;\n						if (representations != null && !representations.isEmpty()) {\n							Symbol representation = representations.get(representations.size() - 1);\n							request.setAttribute(\"type\", representation.getType().toString());\n							request.setAttribute(\"info\", representation.getInfo().toString());\n							agent.see(\"askView\", httpArgs);\n						}\n						else {\n							wantsToKnow.see(\"read\", \"EmptyAction\", new AbstractAction() {\n								public void act(Object object, Object callback2) {\n									String type = \"java\";\n									String info = \"\";\n									List<Symbol> representations = (List<Symbol>) object;\n									if (representations != null && !representations.isEmpty()) {\n										type = representations.get(representations.size() - 1).getType().toString();\n										info = representations.get(representations.size() - 1).getInfo().toString();\n										info = info.replaceAll(\"EmptyAction\", concept);\n									}\n									request.setAttribute(\"type\", type);\n									request.setAttribute(\"info\", info);\n									agent.see(\"askView\", httpArgs);\n								}\n							});\n						}\n					}\n				});\n			*/\n			}\n		});\n\n	}\n\n}','2021-02-07 01:47:21'),(57,'jsp','<%\nString agentName = (String) request.getAttribute(\"agentName\");\nString word = (String) request.getAttribute(\"word\");\nString baseUrl = (String) request.getAttribute(\"baseUrl\");\nString controllerUrl = (String) request.getAttribute(\"controllerUrl\");\nString actionAddress = (String) request.getAttribute(\"actionAddress\");\n%>\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n	<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n	<title>LEA - <%=agentName%> asks \"<%=word%>?\"</title>\n	<script\n  src=\"https://code.jquery.com/jquery-1.12.4.min.js\"\n  integrity=\"sha256-ZosEbRLbNQzLpnKIkEdrPv7lOy9C27hHQ+Xp8a4MxAQ=\"\n  crossorigin=\"anonymous\"></script>\n	<script src=\"https://pagecdn.io/lib/ace/1.4.12/ace.js\"></script>\n	<script src=\"<%=baseUrl%>_js/agent.js\"></script>\n	<script>\n	$(function() {\n		var editor = ace.edit(\"info\");\n		editor.getSession().setMode(\"ace/mode/java\");\n		var type = $(\'input[name=type]\');\n		$(\'form\').submit(function() {\n			$(\'textarea[name=info]\').val(editor.getValue());\n			return true;\n		});\n		var agent = new HTTPAgent(\'<%=controllerUrl%>\');\n		agent.see(\'wread\', {w: \'<%=word%>\'}, function (r) {\n			if (r.type != \'error\') {\n				type.val(r.type);\n				editor.getSession().setMode(\"ace/mode/\" + r.type.replace(\'class\', \'\'));\n				editor.setValue(r.info);\n			}\n			else {\n				agent.see(\'wread\', {k: \'EmptyAction\'}, function (r) {\n					if (r.type != \'error\') {\n						type.val(r.type);\n						editor.setValue(r.info);\n					}\n				}, \'json\');					\n			}\n		}, \'json\');\n	});\n	</script>\n</head>\n<body>\n	<form action=\"<%=actionAddress%>\" method=\"post\">\n	<div><%=agentName%> - What\'s the meaning of <input name=\"key\" value=\"<%=word%>\" type=\"text\" />?</div>\n	<textarea name=\"info\" cols=\"70\" rows=\"20\" style=\"display: none;\"></textarea>\n	<div id=\"info\" style=\"width: 600px; height: 400px; float: left;\"></div>\n	<input name=\"type\" type=\"text\" /><br />\n	<input type=\"submit\" value=\"ok\" />\n	<input type=\"button\" value=\"cancel\" onClick=\"$(this).closest(\'form\').remove();\" />\n	</form>\n</body>\n</html>','2021-02-07 01:55:15'),(58,'java','package br.ifce.mind.actions.live;\r\n\r\nimport br.ifce.mind.actions.AbstractAction;\r\nimport br.ifce.mind.Agent;\r\nimport br.ifce.brain.Symbol;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\nimport java.util.List;\r\n\r\npublic class ask extends AbstractAction {\r\n\r\n	public void act(Object object, Object callback) {\r\n		boolean asked = true;\r\n		Agent wantsToKnowTmp = null;\r\n		String key = null, address, type, info;\r\n\r\n		Agent agent = this.getAgent();\r\n		Object [] httpArgsTmp = null;\r\n		HttpServletRequest requestTmp = null;\r\n		try {\r\n			// talvez esse bloco tivesse pensando em receber os pedidos dos agentes filhos...\r\n			/*/\r\n			Object [] a = (Object []) object;\r\n			Symbol perception = (Symbol) a[0];\r\n			wantsToKnowTmp = (Agent) a[1];\r\n			/*/\r\n			Symbol perception = (Symbol) object;\r\n			wantsToKnowTmp = agent;\r\n			/**/\r\n			httpArgsTmp = (Object []) perception.getInfo();\r\n			key = (String) perception.getType();\r\n		} catch (Exception e) {\r\n			try {\r\n				httpArgsTmp = (Object []) object;\r\n				requestTmp = (HttpServletRequest) httpArgsTmp[0];\r\n				key = requestTmp.getParameter(\"k\");\r\n				wantsToKnowTmp = agent;\r\n			} catch (Exception e2) {\r\n				asked = false;\r\n			}\r\n		}\r\n		Agent wantsToKnow = wantsToKnowTmp;\r\n		String concept = key;\r\n		Object [] httpArgs = httpArgsTmp;\r\n		HttpServletRequest request = (HttpServletRequest) httpArgs[0];\r\n		agent.see(\"baseUrl\", httpArgs, new AbstractAction () {\r\n			public void act(Object t, Object c) {\r\n				request.setAttribute(\"baseUrl\", t);\r\n			}\r\n		});\r\n		agent.see(\"controllerUrl\", httpArgs, new AbstractAction () {\r\n			public void act(Object target, Object c) {\r\n				String address = (String) target;\r\n\r\n				request.setAttribute(\"key\", concept);\r\n				request.setAttribute(\"agentName\", wantsToKnow.toString());\r\n				request.setAttribute(\"controllerUrl\", address);\r\n				request.setAttribute(\"actionAddress\", address + \"_hearAnswer\");\r\n				agent.see(\"askView\", httpArgs);\r\n/*\r\n				wantsToKnow.see(\"read\", concept, new AbstractAction() {\r\n					public void act(Object object, Object callback2) {\r\n						List<Symbol> representations = (List<Symbol>) object;\r\n						if (representations != null && !representations.isEmpty()) {\r\n							Symbol representation = representations.get(representations.size() - 1);\r\n							request.setAttribute(\"type\", representation.getType().toString());\r\n							request.setAttribute(\"info\", representation.getInfo().toString());\r\n							agent.see(\"askView\", httpArgs);\r\n						}\r\n						else {\r\n							wantsToKnow.see(\"read\", \"EmptyAction\", new AbstractAction() {\r\n								public void act(Object object, Object callback2) {\r\n									String type = \"java\";\r\n									String info = \"\";\r\n									List<Symbol> representations = (List<Symbol>) object;\r\n									if (representations != null && !representations.isEmpty()) {\r\n										type = representations.get(representations.size() - 1).getType().toString();\r\n										info = representations.get(representations.size() - 1).getInfo().toString();\r\n										info = info.replaceAll(\"EmptyAction\", concept);\r\n									}\r\n									request.setAttribute(\"type\", type);\r\n									request.setAttribute(\"info\", info);\r\n									agent.see(\"askView\", httpArgs);\r\n								}\r\n							});\r\n						}\r\n					}\r\n				});\r\n			*/\r\n			}\r\n		});\r\n\r\n	}\r\n\r\n}','2021-02-07 01:58:33'),(59,'java','package br.ifce.mind.actions.live;\r\n\r\nimport br.ifce.mind.actions.AbstractAction;\r\nimport br.ifce.mind.Agent;\r\nimport br.ifce.brain.Symbol;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\nimport java.util.List;\r\n\r\npublic class ask extends AbstractAction {\r\n\r\n	public void act(Object object, Object callback) {\r\n		boolean asked = true;\r\n		Agent wantsToKnowTmp = null;\r\n		String key = null, address, type, info;\r\n\r\n		Agent agent = this.getAgent();\r\n		Object [] httpArgsTmp = null;\r\n		HttpServletRequest requestTmp = null;\r\n		try {\r\n			// talvez esse bloco tivesse pensando em receber os pedidos dos agentes filhos...\r\n			/*/\r\n			Object [] a = (Object []) object;\r\n			Symbol perception = (Symbol) a[0];\r\n			wantsToKnowTmp = (Agent) a[1];\r\n			/*/\r\n			Symbol perception = (Symbol) object;\r\n			wantsToKnowTmp = agent;\r\n			/**/\r\n			httpArgsTmp = (Object []) perception.getInfo();\r\n			key = (String) perception.getType();\r\n		} catch (Exception e) {\r\n			try {\r\n				httpArgsTmp = (Object []) object;\r\n				requestTmp = (HttpServletRequest) httpArgsTmp[0];\r\n				key = requestTmp.getParameter(\"k\");\r\n				wantsToKnowTmp = agent;\r\n			} catch (Exception e2) {\r\n				asked = false;\r\n			}\r\n		}\r\n		Agent wantsToKnow = wantsToKnowTmp;\r\n		String concept = key;\r\n		Object [] httpArgs = httpArgsTmp;\r\n		HttpServletRequest request = (HttpServletRequest) httpArgs[0];\r\n		agent.see(\"baseUrl\", httpArgs, new AbstractAction () {\r\n			public void act(Object t, Object c) {\r\n				request.setAttribute(\"baseUrl\", t);\r\n			}\r\n		});\r\n		agent.see(\"controllerUrl\", httpArgs, new AbstractAction () {\r\n			public void act(Object target, Object c) {\r\n				String address = (String) target;\r\n\r\n				request.setAttribute(\"key\", concept);\r\n				request.setAttribute(\"agentName\", wantsToKnow.toString());\r\n				request.setAttribute(\"controllerUrl\", address);\r\n				request.setAttribute(\"actionAddress\", address + \"whearAnswer\");\r\n				agent.see(\"askView\", httpArgs);\r\n/*\r\n				wantsToKnow.see(\"read\", concept, new AbstractAction() {\r\n					public void act(Object object, Object callback2) {\r\n						List<Symbol> representations = (List<Symbol>) object;\r\n						if (representations != null && !representations.isEmpty()) {\r\n							Symbol representation = representations.get(representations.size() - 1);\r\n							request.setAttribute(\"type\", representation.getType().toString());\r\n							request.setAttribute(\"info\", representation.getInfo().toString());\r\n							agent.see(\"askView\", httpArgs);\r\n						}\r\n						else {\r\n							wantsToKnow.see(\"read\", \"EmptyAction\", new AbstractAction() {\r\n								public void act(Object object, Object callback2) {\r\n									String type = \"java\";\r\n									String info = \"\";\r\n									List<Symbol> representations = (List<Symbol>) object;\r\n									if (representations != null && !representations.isEmpty()) {\r\n										type = representations.get(representations.size() - 1).getType().toString();\r\n										info = representations.get(representations.size() - 1).getInfo().toString();\r\n										info = info.replaceAll(\"EmptyAction\", concept);\r\n									}\r\n									request.setAttribute(\"type\", type);\r\n									request.setAttribute(\"info\", info);\r\n									agent.see(\"askView\", httpArgs);\r\n								}\r\n							});\r\n						}\r\n					}\r\n				});\r\n			*/\r\n			}\r\n		});\r\n\r\n	}\r\n\r\n}','2021-02-07 01:59:04'),(60,'jsp','<%\nString agentName = (String) request.getAttribute(\"agentName\");\nString key = (String) request.getAttribute(\"key\");\nString baseUrl = (String) request.getAttribute(\"baseUrl\");\nString controllerUrl = (String) request.getAttribute(\"controllerUrl\");\nString actionAddress = (String) request.getAttribute(\"actionAddress\");\n%>\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n	<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n	<title>LEA - <%=agentName%> asks \"<%=word%>?\"</title>\n	<script\n  src=\"https://code.jquery.com/jquery-1.12.4.min.js\"\n  integrity=\"sha256-ZosEbRLbNQzLpnKIkEdrPv7lOy9C27hHQ+Xp8a4MxAQ=\"\n  crossorigin=\"anonymous\"></script>\n	<script src=\"https://pagecdn.io/lib/ace/1.4.12/ace.js\"></script>\n	<script src=\"<%=baseUrl%>_js/agent.js\"></script>\n	<script>\n	$(function() {\n		var editor = ace.edit(\"info\");\n		editor.getSession().setMode(\"ace/mode/java\");\n		var type = $(\'input[name=type]\');\n		$(\'form\').submit(function() {\n			$(\'textarea[name=info]\').val(editor.getValue());\n			return true;\n		});\n		var agent = new HTTPAgent(\'<%=controllerUrl%>\');\n		agent.see(\'wread\', {k: \'<%=key%>\'}, function (r) {\n			if (r.type != \'error\') {\n				type.val(r.type);\n				editor.getSession().setMode(\"ace/mode/\" + r.type.replace(\'class\', \'\'));\n				editor.setValue(r.info);\n			}\n			else {\n				agent.see(\'wread\', {k: \'EmptyAction\'}, function (r) {\n					if (r.type != \'error\') {\n						type.val(r.type);\n						editor.setValue(r.info);\n					}\n				}, \'json\');					\n			}\n		}, \'json\');\n	});\n	</script>\n</head>\n<body>\n	<form action=\"<%=actionAddress%>\" method=\"post\">\n	<div><%=agentName%> - What\'s the meaning of <input name=\"key\" value=\"<%=key%>\" type=\"text\" />?</div>\n	<textarea name=\"info\" cols=\"70\" rows=\"20\" style=\"display: none;\"></textarea>\n	<div id=\"info\" style=\"width: 600px; height: 400px; float: left;\"></div>\n	<input name=\"type\" type=\"text\" /><br />\n	<input type=\"submit\" value=\"ok\" />\n	<input type=\"button\" value=\"cancel\" onClick=\"$(this).closest(\'form\').remove();\" />\n	</form>\n</body>\n</html>','2021-02-07 02:00:55'),(61,'jsp','<%\nString agentName = (String) request.getAttribute(\"agentName\");\nString key = (String) request.getAttribute(\"key\");\nString baseUrl = (String) request.getAttribute(\"baseUrl\");\nString controllerUrl = (String) request.getAttribute(\"controllerUrl\");\nString actionAddress = (String) request.getAttribute(\"actionAddress\");\n%>\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n	<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n	<title>LEA - <%=agentName%> asks \"<%=key%>?\"</title>\n	<script\n  src=\"https://code.jquery.com/jquery-1.12.4.min.js\"\n  integrity=\"sha256-ZosEbRLbNQzLpnKIkEdrPv7lOy9C27hHQ+Xp8a4MxAQ=\"\n  crossorigin=\"anonymous\"></script>\n	<script src=\"https://pagecdn.io/lib/ace/1.4.12/ace.js\"></script>\n	<script src=\"<%=baseUrl%>_js/agent.js\"></script>\n	<script>\n	$(function() {\n		var editor = ace.edit(\"info\");\n		editor.getSession().setMode(\"ace/mode/java\");\n		var type = $(\'input[name=type]\');\n		$(\'form\').submit(function() {\n			$(\'textarea[name=info]\').val(editor.getValue());\n			return true;\n		});\n		var agent = new HTTPAgent(\'<%=controllerUrl%>\');\n		agent.see(\'wread\', {k: \'<%=key%>\'}, function (r) {\n			if (r.type != \'error\') {\n				type.val(r.type);\n				editor.getSession().setMode(\"ace/mode/\" + r.type.replace(\'class\', \'\'));\n				editor.setValue(r.info);\n			}\n			else {\n				agent.see(\'wread\', {k: \'EmptyAction\'}, function (r) {\n					if (r.type != \'error\') {\n						type.val(r.type);\n						editor.setValue(r.info);\n					}\n				}, \'json\');					\n			}\n		}, \'json\');\n	});\n	</script>\n</head>\n<body>\n	<form action=\"<%=actionAddress%>\" method=\"post\">\n	<div><%=agentName%> - What\'s the meaning of <input name=\"key\" value=\"<%=key%>\" type=\"text\" />?</div>\n	<textarea name=\"info\" cols=\"70\" rows=\"20\" style=\"display: none;\"></textarea>\n	<div id=\"info\" style=\"width: 600px; height: 400px; float: left;\"></div>\n	<input name=\"type\" type=\"text\" /><br />\n	<input type=\"submit\" value=\"ok\" />\n	<input type=\"button\" value=\"cancel\" onClick=\"$(this).closest(\'form\').remove();\" />\n	</form>\n</body>\n</html>','2021-02-07 02:52:07'),(62,'java','package br.ifce.mind.actions.live;\n\nimport br.ifce.mind.actions.AbstractAction;\nimport br.ifce.mind.Agent;\nimport br.ifce.brain.Symbol;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport java.util.List;\n\npublic class controller.wread extends AbstractAction {\n\n	public void act(Object target, Object callback) {		\n		Object [] args = (Object []) target;\n		HttpServletRequest request = (HttpServletRequest) args[0];\n		HttpServletResponse response = (HttpServletResponse) args[1];\n        \n		Agent agent = this.getAgent();\n		String word = request.getParameter(\"k\");\n\n		agent.see(\"read\", word, new AbstractAction () {\n		    public void act(Object t, Object c) {\n		        List<Symbol> representations;\n        		Symbol representation;\n        		representations = (List<Symbol>) t;\n        		if (representations != null && !representations.isEmpty()) {\n        			representation = representations.get(representations.size() - 1);\n        		}\n        		else {\n        		    representation = new Symbol(0, \"error\", \"Word not found!\");\n        		}\n        \n                try{\n                    response.getWriter().println(representation.toJSON());\n                    response.setContentType(\"application/json\");\n                }\n                catch (Exception e) {\n                    \n                }\n        		doCallback(callback, representation);\n		    }\n		});\n	}\n\n}','2021-02-07 02:55:16'),(63,'java','/**\r\n * MInD - Model for Intelligence Development\r\n * by Renato Lenz Costalima\r\n * This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. \r\n */\r\npackage br.ifce.mind.action.live;\r\n\r\nimport br.ifce.mind.actions.AbstractAction;\r\n\r\nimport java.io.IOException;\r\nimport java.util.List;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\npublic class Index extends AbstractAction {\r\n\r\n	public void act(Object _args, Object callback) {\r\n		try {\r\n			Object[] args = (Object[]) _args;\r\n			HttpServletRequest request = (HttpServletRequest) args[0];\r\n			HttpServletResponse response = (HttpServletResponse) args[1];\r\n			List<Object []> questions = (List<Object []>) request.getServletContext().getAttribute(\"questions\");\r\n			response.getWriter().println(\"OlÃÂ¡, tia Gessica!\");\r\n			for (Object [] question: questions) {\r\n				response.getWriter().println(question[0] + \": \" + question[1]);\r\n			}\r\n		} catch (IOException e) {}\r\n		\r\n		callback(callback, null);\r\n	}\r\n\r\n}\r\n','2021-02-07 02:57:01'),(64,'java','/**\n * LEA - Live Environment for Agents\n * by Renato Lenz Costalima\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. \n */\npackage br.ifce.mind.actions.live;\n\nimport br.ifce.mind.actions.AbstractAction;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\npublic class EmptyAction extends AbstractAction {\n\n	public void act(Object target, Object callback) {		\n		Object [] args = (Object []) target;\n		HttpServletRequest request = (HttpServletRequest) args[0];\n		HttpServletResponse response = (HttpServletResponse) args[1];\n		// TODO Write your code here\n        \n		doCallback(callback, null);\n	}\n\n}','2021-02-07 03:00:45'),(65,'java','/**\r\n * LEA - Live Environment for Agents\r\n * by Renato Lenz Costalima\r\n * This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. \r\n */\r\npackage br.ifce.mind.actions.live;\r\n\r\nimport br.ifce.mind.actions.AbstractAction;\r\nimport br.ifce.mind.Agent;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\npublic class index extends AbstractAction {\r\n\r\n	public void act(Object target, Object callback) {		\r\n		Object [] args = (Object []) target;\r\n		HttpServletRequest request = (HttpServletRequest) args[0];\r\n		HttpServletResponse response = (HttpServletResponse) args[1];\r\n		\r\n        Agent agent = this.getAgent();\r\n        agent.see(\"controllerUrl\", new Object [] {request}, new AbstractAction () {\r\n            public void act(Object t, Object c) {\r\n                request.setAttribute(\"controllerUrl\", t);\r\n            }\r\n        });\r\n        agent.see(\"baseUrl\", new Object [] {request}, new AbstractAction () {\r\n            public void act(Object t, Object c) {\r\n                request.setAttribute(\"baseUrl\", t);\r\n                agent.see(\"indexView\", target);\r\n            }\r\n        });\r\n        \r\n		doCallback(callback, null);\r\n	}\r\n\r\n}','2021-02-07 03:02:28'),(66,'jsp','<%\r\nString actionName = (String) request.getAttribute(\"actionName\");\r\nString baseUrl = (String) request.getAttribute(\"baseUrl\");\r\nString controllerUrl = (String) request.getAttribute(\"controllerUrl\");\r\nString address = controllerUrl + actionName + \"/\";\r\n\r\n%><!DOCTYPE html>\r\n<html>\r\n<head>\r\n	<title>LEA - Live Environment for Agents</title>\r\n	<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" />\r\n    <script\r\n  src=\"https://code.jquery.com/jquery-1.12.4.min.js\"\r\n  integrity=\"sha256-ZosEbRLbNQzLpnKIkEdrPv7lOy9C27hHQ+Xp8a4MxAQ=\"\r\n  crossorigin=\"anonymous\"></script>\r\n    <script src=\"<%=baseUrl%>_js/brain.js\"></script>\r\n    <script src=\"<%=baseUrl%>_js/jsbrain.js\"></script>\r\n    <script src=\"<%=baseUrl%>_js/ajaxbrain.js\"></script>\r\n    <script src=\"<%=baseUrl%>_js/mind.js\"></script>\r\n    <script src=\"<%=baseUrl%>_js/agent.js\"></script>\r\n    <script src=\"<%=baseUrl%>_js/ceed.js\"></script>\r\n    <script src=\"<%=baseUrl%>_js/lea.js\"></script>\r\n    <script>\r\n    $(function () {\r\n        var baseUrl = \'<%=baseUrl%>\'\r\n        var controllerUrl = \'<%=controllerUrl%>\';\r\n        window[\'baseUrl\'] = baseUrl;\r\n        window[\'controllerUrl\'] = controllerUrl;\r\n        var pathname = window.location.pathname.split(\'/\');\r\n        var agentName = pathname.slice(3).join(\'/\');\r\n    	//var agentName = controllerUrl.split(\'/\').slice(-2, -1)[0];\r\n        window[\'page\'] = LEA.getAgent(agentName + \' Page\');\r\n        page.see(\'live\', \'body\', function () {\r\n    	    page.see(\'getAgent\', \'Ceed\', function (ceed) {\r\n            	window[\'ceed\'] = ceed;\r\n        	    ceed.see(\'set\', [\'parent\', ceed], function () {\r\n                	ceed.see(\'live\', \'body\', function (ok) {\r\n                    	ceed.see(\'refreshAgents\');\r\n                	    page.see(\'set\', [\'parent\', ceed], function () {\r\n                    	    page.see(\'study\', \'ask\', function () {\r\n                	            page.see(\'edit\');\r\n                	        });\r\n                	    });\r\n            	    });\r\n            	});\r\n                var controller = new HTTPAgent(controllerUrl);\r\n                window[\'controller\'] = controller;\r\n        	});\r\n        });\r\n    });\r\n	</script>\r\n	<style>\r\n	#auth {\r\n        position: sticky;\r\n        top: 0;\r\n        text-align: right;\r\n    }\r\n    \r\n    #license {\r\n        position: fixed;\r\n        bottom: 8px;\r\n        right: 8px;\r\n        text-align: right;\r\n        width: 420px;\r\n    }\r\n    body {\r\n        padding-bottom: 75px;\r\n    }\r\n	</style>\r\n</head>\r\n<body>\r\n    <div id=\"auth\">\r\n<%\r\ntry {\r\n    String username = request.getSession().getAttribute(\"username\").toString();\r\n%>\r\n        Welcome, <span><%=username%></span>!\r\n        <a href=\"<%=baseUrl%>ce/auth/logout\">Logout</a>\r\n<%\r\n}\r\ncatch (Exception e) {\r\n%>\r\n        <a href=\"<%=baseUrl%>ce/auth\">Login</a>\r\n<%\r\n}\r\n%>\r\n    </div>\r\n    <div id=\"license\">\r\n        <b><a target=\"_blank\" href=\"https://tiia.com.br/\">LEA - Live Environment for Agents</a></b> by <a href=\"mailto: macaroots@gmail.com\">Renato Lenz Costalima</a><br />\r\n        This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at <a rel=\"license\" href=\"https://mozilla.org/MPL/2.0/\">https://mozilla.org/MPL/2.0/</a>.\r\n    </div>\r\n</body>\r\n</html>','2021-02-07 03:02:43'),(67,'java.lang.String','indexView','2021-02-07 03:06:06'),(68,'jsp','<%\r\nString actionName = (String) request.getAttribute(\"actionName\");\r\nString baseUrl = (String) request.getAttribute(\"baseUrl\");\r\nString controllerUrl = (String) request.getAttribute(\"controllerUrl\");\r\nString address = controllerUrl + actionName + \"/\";\r\n%><!DOCTYPE html>\r\n<html>\r\n<head>\r\n	<title>LEA - Live Environment for Agents</title>\r\n	<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" />\r\n	<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script>\r\n	<script type=\"module\">\r\n	import {Ceed, AskAgent} from  \'<%=baseUrl%>_js/ceed/ceed.js\';\r\n	import {SocketAgent} from  \'<%=baseUrl%>_js/agents/lea_client.js\';\r\n	import {AjaxBrain} from  \'<%=baseUrl%>_js/ceed/ajaxbrain.js\';\r\n	window.Ceed = Ceed;\r\n	window.SocketAgent = SocketAgent;\r\n	window.AskAgent = AskAgent;\r\n	window.baseUrl = \'<%=baseUrl%>\';\r\n\r\n	var pathname = window.location.pathname.split(\'/\');\r\n	let paths = pathname.slice(1);\r\n    let controllerName = paths[0];\r\n    let agentName = paths.join(\'/\') + \'Page Page\';\r\n	$(function() {\r\n		Ceed().then(ceed => {\r\n		    let ask = new AskAgent(\'CE\');\r\n			ceed.see(\'set\', [\'ask\', ask]);\r\n			ceed.skills[\'ask\'] = ask;\r\n			ceed.see(\'setLibrary\', new AjaxBrain(\'/brain/\'));\r\n			\r\n			Ceed(agentName).then(async agent => {\r\n				window.agent = agent;\r\n				agent.see(\'appendTo\', \'body\');\r\n				\r\n				agent.see(\'getAgent\', \'CE\').then(async ce => {\r\n        		    await ce.see(\'appendTo\', \'body\');\r\n            		agent.see(\'edit\');\r\n            		\r\n        			ceed.see(\'connect\');\r\n        			ceed.see(\'getSocketAgent\', controllerName + \'Controller\');\r\n        		});\r\n			});\r\n			\r\n		});\r\n	});\r\n	</script>\r\n	<style>\r\n	#auth {\r\n        position: sticky;\r\n        top: 0;\r\n        text-align: right;\r\n    }\r\n    \r\n    #license {\r\n        position: fixed;\r\n        bottom: 8px;\r\n        right: 8px;\r\n        text-align: right;\r\n        width: 420px;\r\n    }\r\n    body {\r\n        padding-bottom: 75px;\r\n    }\r\n	</style>\r\n</head>\r\n<body>\r\n    <div id=\"auth\">\r\n    </div>\r\n    <div id=\"license\">\r\n        <b><a target=\"_blank\" href=\"https://tiia.com.br/\">LEA - Live Environment for Agents</a></b> by <a href=\"mailto: macaroots@gmail.com\">Renato Lenz Costalima</a><br />\r\n        This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at <a rel=\"license\" href=\"https://mozilla.org/MPL/2.0/\">https://mozilla.org/MPL/2.0/</a>.\r\n    </div>\r\n</body>\r\n</html>','2021-02-07 03:13:08'),(69,'jsp','<%\r\nString actionName = (String) request.getAttribute(\"actionName\");\r\nString baseUrl = (String) request.getAttribute(\"baseUrl\");\r\nString controllerUrl = (String) request.getAttribute(\"controllerUrl\");\r\nString address = controllerUrl + actionName + \"/\";\r\n%><!DOCTYPE html>\r\n<html>\r\n<head>\r\n	<title>LEA - Live Environment for Agents</title>\r\n	<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" />\r\n	<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script>\r\n	<script type=\"module\">\r\n	import {Ceed, AskAgent} from  \'<%=baseUrl%>_js/ceed-0.5/ceed.js\';\r\n	import {AjaxBrain} from  \'<%=baseUrl%>_js/ceed-0.5/ajaxbrain.js\';\r\n	window.Ceed = Ceed;\r\n	window.SocketAgent = SocketAgent;\r\n	window.AskAgent = AskAgent;\r\n	window.baseUrl = \'<%=baseUrl%>\';\r\n\r\n	var pathname = window.location.pathname.split(\'/\');\r\n	let paths = pathname.slice(1);\r\n    let controllerName = paths[0];\r\n    let agentName = paths.join(\'/\') + \'Page Page\';\r\n	$(function() {\r\n		Ceed().then(ceed => {\r\n		    let ask = new AskAgent(\'CE\');\r\n			ceed.see(\'set\', [\'ask\', ask]);\r\n			ceed.skills[\'ask\'] = ask;\r\n			ceed.see(\'setLibrary\', new AjaxBrain(\'/brain/\'));\r\n			\r\n			Ceed(agentName).then(async agent => {\r\n				window.agent = agent;\r\n				agent.see(\'appendTo\', \'body\');\r\n				\r\n				agent.see(\'getAgent\', \'CE\').then(async ce => {\r\n        		    await ce.see(\'appendTo\', \'body\');\r\n            		agent.see(\'edit\');\r\n        		});\r\n			});\r\n			\r\n		});\r\n	});\r\n	</script>\r\n	<style>\r\n	#auth {\r\n        position: sticky;\r\n        top: 0;\r\n        text-align: right;\r\n    }\r\n    \r\n    #license {\r\n        position: fixed;\r\n        bottom: 8px;\r\n        right: 8px;\r\n        text-align: right;\r\n        width: 420px;\r\n    }\r\n    body {\r\n        padding-bottom: 75px;\r\n    }\r\n	</style>\r\n</head>\r\n<body>\r\n    <div id=\"auth\">\r\n    </div>\r\n    <div id=\"license\">\r\n        <b><a target=\"_blank\" href=\"https://tiia.com.br/\">LEA - Live Environment for Agents</a></b> by <a href=\"mailto: macaroots@gmail.com\">Renato Lenz Costalima</a><br />\r\n        This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at <a rel=\"license\" href=\"https://mozilla.org/MPL/2.0/\">https://mozilla.org/MPL/2.0/</a>.\r\n    </div>\r\n</body>\r\n</html>','2021-02-07 03:14:41'),(70,'jsp','<%\r\nString actionName = (String) request.getAttribute(\"actionName\");\r\nString baseUrl = (String) request.getAttribute(\"baseUrl\");\r\nString controllerUrl = (String) request.getAttribute(\"controllerUrl\");\r\nString address = controllerUrl + actionName + \"/\";\r\n%><!DOCTYPE html>\r\n<html>\r\n<head>\r\n	<title>LEA - Live Environment for Agents</title>\r\n	<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" />\r\n	<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script>\r\n	<script type=\"module\">\r\n	import {Ceed, AskAgent} from  \'<%=baseUrl%>_js/ceed-0.5/ceed.js\';\r\n	import {AjaxBrain} from  \'<%=baseUrl%>_js/ceed-0.5/ajaxbrain.js\';\r\n	window.Ceed = Ceed;\r\n	window.AskAgent = AskAgent;\r\n	window.baseUrl = \'<%=baseUrl%>\';\r\n\r\n	var pathname = window.location.pathname.split(\'/\');\r\n	let paths = pathname.slice(1);\r\n    let controllerName = paths[0];\r\n    let agentName = paths.join(\'/\') + \'Page Page\';\r\n	$(function() {\r\n		Ceed().then(ceed => {\r\n		    let ask = new AskAgent(\'CE\');\r\n			ceed.see(\'set\', [\'ask\', ask]);\r\n			ceed.skills[\'ask\'] = ask;\r\n			ceed.see(\'setLibrary\', new AjaxBrain(\'/brain/\'));\r\n			\r\n			Ceed(agentName).then(async agent => {\r\n				window.agent = agent;\r\n				agent.see(\'appendTo\', \'body\');\r\n				\r\n				agent.see(\'getAgent\', \'CE\').then(async ce => {\r\n        		    await ce.see(\'appendTo\', \'body\');\r\n            		agent.see(\'edit\');\r\n        		});\r\n			});\r\n			\r\n		});\r\n	});\r\n	</script>\r\n	<style>\r\n	#auth {\r\n        position: sticky;\r\n        top: 0;\r\n        text-align: right;\r\n    }\r\n    \r\n    #license {\r\n        position: fixed;\r\n        bottom: 8px;\r\n        right: 8px;\r\n        text-align: right;\r\n        width: 420px;\r\n    }\r\n    body {\r\n        padding-bottom: 75px;\r\n    }\r\n	</style>\r\n</head>\r\n<body>\r\n    <div id=\"auth\">\r\n    </div>\r\n    <div id=\"license\">\r\n        <b><a target=\"_blank\" href=\"https://tiia.com.br/\">LEA - Live Environment for Agents</a></b> by <a href=\"mailto: macaroots@gmail.com\">Renato Lenz Costalima</a><br />\r\n        This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at <a rel=\"license\" href=\"https://mozilla.org/MPL/2.0/\">https://mozilla.org/MPL/2.0/</a>.\r\n    </div>\r\n</body>\r\n</html>','2021-02-07 03:15:06'),(71,'jsp','<%\r\nString actionName = (String) request.getAttribute(\"actionName\");\r\nString baseUrl = (String) request.getAttribute(\"baseUrl\");\r\nString controllerUrl = (String) request.getAttribute(\"controllerUrl\");\r\nString address = controllerUrl + actionName + \"/\";\r\n%><!DOCTYPE html>\r\n<html>\r\n<head>\r\n	<title>LEA - Live Environment for Agents</title>\r\n	<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" />\r\n	<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script>\r\n	<script type=\"module\">\r\n	import {Ceed, AskAgent} from  \'<%=baseUrl%>_js/ceed-0.5/ceed.js\';\r\n	import {AjaxBrain} from  \'<%=baseUrl%>_js/ceed-0.5/ajaxbrain.js\';\r\n	window.Ceed = Ceed;\r\n	window.AskAgent = AskAgent;\r\n	window.baseUrl = \'<%=baseUrl%>\';\r\n\r\n	var pathname = window.location.pathname.split(\'/\');\r\n	let paths = pathname.slice(1);\r\n    let controllerName = paths[0];\r\n    let agentName = paths.join(\'/\') + \'Page Page\';\r\n	$(function() {\r\n		Ceed().then(ceed => {\r\n		    let ask = new AskAgent(\'CE\');\r\n			ceed.see(\'set\', [\'ask\', ask]);\r\n			ceed.skills[\'ask\'] = ask;\r\n			ceed.see(\'setLibrary\', new AjaxBrain(\'/LEA/ce/brain/\'));\r\n			\r\n			Ceed(agentName).then(async agent => {\r\n				window.agent = agent;\r\n				agent.see(\'appendTo\', \'body\');\r\n				\r\n				agent.see(\'getAgent\', \'CE\').then(async ce => {\r\n        		    await ce.see(\'appendTo\', \'body\');\r\n            		agent.see(\'edit\');\r\n        		});\r\n			});\r\n			\r\n		});\r\n	});\r\n	</script>\r\n	<style>\r\n	#auth {\r\n        position: sticky;\r\n        top: 0;\r\n        text-align: right;\r\n    }\r\n    \r\n    #license {\r\n        position: fixed;\r\n        bottom: 8px;\r\n        right: 8px;\r\n        text-align: right;\r\n        width: 420px;\r\n    }\r\n    body {\r\n        padding-bottom: 75px;\r\n    }\r\n	</style>\r\n</head>\r\n<body>\r\n    <div id=\"auth\">\r\n    </div>\r\n    <div id=\"license\">\r\n        <b><a target=\"_blank\" href=\"https://tiia.com.br/\">LEA - Live Environment for Agents</a></b> by <a href=\"mailto: macaroots@gmail.com\">Renato Lenz Costalima</a><br />\r\n        This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at <a rel=\"license\" href=\"https://mozilla.org/MPL/2.0/\">https://mozilla.org/MPL/2.0/</a>.\r\n    </div>\r\n</body>\r\n</html>','2021-02-07 03:15:29'),(72,'java.lang.String','tie','2021-02-08 19:52:47'),(73,'java','package br.ifce.mind.actions.live;\r\n\r\nimport br.ifce.mind.actions.AbstractAction;\r\nimport br.ifce.mind.Agent;\r\nimport br.ifce.brain.Brain;\r\nimport br.ifce.brain.Link;\r\nimport br.ifce.brain.Symbol;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\npublic class tie extends AbstractAction {\r\n\r\n	public void act(Object target, Object callback) {\r\n		Object [] args = (Object []) target;\r\n		HttpServletRequest request = (HttpServletRequest) args[0];\r\n		HttpServletResponse response = (HttpServletResponse) args[1];\r\n\r\n        Agent agent = this.getAgent();\r\n        agent.see(\"getLinkFromRequest\", request, new AbstractAction () {\r\n			public void act(Object t, Object c) {\r\n				Link link = (Link) t;\r\n				\r\n				String username = (String) request.getSession().getAttribute(\"username\");\r\n				\r\n				agent.see(\"checkTiePermissions\", new Object[] {username, link}, new AbstractAction () {\r\n					public void act(Object permitted, Object c) {\r\n					    if ((Boolean) permitted) {\r\n        					agent.see(\"get\", \"library\", new AbstractAction () {\r\n            					public void act(Object t, Object c) {\r\n            						Brain brain = (Brain) t;\r\n		               						\r\n            						brain.tie(link);\r\n            \r\n                                    // author\r\n                                    agent.see(\"write\", new Object[] {username + \".created\", link.getId()});\r\n                                    /*brain.tie(new Link(\r\n                                        new Symbol(username), \r\n                                        new Symbol(\"tie\"),\r\n                                        new Symbol(link.getA().getId() + \",\" + link.getR().getId() + \",\" + link.getB().getId())\r\n                                    ));*/\r\n            \r\n            						try {\r\n            							response.setContentType(\"application/json\");\r\n            							response.getWriter().println(link.toJSONObject().toString());\r\n            						} catch(Exception e) {\r\n            							System.out.println(\"erroBrainTie: \" + e);\r\n            						}\r\n                				}\r\n            				});\r\n    					}\r\n        				else {\r\n        				    try {\r\n        						response.setContentType(\"application/json\");\r\n        						response.getWriter().println(\"{ok: false, error: \'Permission denied!\'}\");\r\n        					} catch(Exception e) {\r\n        						System.out.println(\"erroBrainTie: \" + e);\r\n        					}\r\n        				}\r\n					}\r\n				});\r\n			}\r\n		});\r\n	}\r\n\r\n}','2021-02-08 19:52:48'),(74,'java.lang.String','checkTiePermissions','2021-02-08 21:01:34'),(75,'java','/**\r\n * LEA - Live Environment for Agents\r\n * by Renato Lenz Costalima\r\n * This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. \r\n */\r\npackage br.ifce.mind.actions.live;\r\n\r\nimport br.ifce.brain.Link;\r\nimport br.ifce.mind.actions.AbstractAction;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\npublic class checkPermissions extends AbstractAction {\r\n\r\n	public void act(Object target, Object callback) {		\r\n		Object [] args = (Object []) target;\r\n		String username = (String) args[0];\r\n		Link link = (Link) args[1];\r\n		boolean permitted = false;\r\n		if (username == null) {\r\n		    permitted = false;\r\n		}\r\n		else { \r\n			if ((link.getA().getInfo() + \"/\").indexOf(username + \"/\") == 0 || username.equals(\"admin\")) {\r\n		        permitted = true;\r\n			}\r\n		}\r\n        \r\n		doCallback(callback, permitted);\r\n	}\r\n\r\n}','2021-02-08 21:01:34'),(76,'java.lang.String','gets','2021-02-08 21:06:19'),(77,'java','/**\r\n * LEA - Live Environment for Agents\r\n * by Renato Lenz Costalima\r\n * This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. \r\n */\r\npackage br.ifce.mind.actions.live;\r\n\r\nimport br.ifce.mind.actions.AbstractAction;\r\nimport br.ifce.mind.Agent;\r\nimport br.ifce.brain.Symbol;\r\nimport br.ifce.brain.Brain;\r\nimport br.ifce.brain.MySQLBrain;\r\n\r\nimport java.util.List;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\nimport org.json.JSONObject;\r\nimport org.json.JSONArray;\r\n\r\npublic class gets extends AbstractAction {\r\n\r\n	public void act(Object target, Object callback) {		\r\n		Object [] args = (Object []) target;\r\n		HttpServletRequest request = (HttpServletRequest) args[0];\r\n		HttpServletResponse response = (HttpServletResponse) args[1];\r\n        \r\n		Agent agent = this.getAgent();\r\n		agent.see(\"get\", \"library\", new AbstractAction() {\r\n			public void act(Object object, Object callback2) {\r\n				Brain brain = (Brain) object;\r\n\r\n				if (request.getParameterMap().containsKey(\"host\")) {\r\n					String host, db, user, pass;\r\n					host = request.getParameter(\"host\");\r\n					db = request.getParameter(\"db\");\r\n					user = request.getParameter(\"user\");\r\n					pass = request.getParameter(\"pass\");\r\n					brain = new MySQLBrain(host, db, user, pass);\r\n				}\r\n\r\n//System.out.println(\"\\n\\nsearching in: \" + brain);\r\n\r\n				Symbol symbol;\r\n				symbol = new Symbol();\r\n				if (request.getParameterMap().containsKey(\"id\")) {\r\n					symbol.setId(new Integer(request.getParameter(\"id\")));\r\n				}\r\n\r\n				if (request.getParameterMap().containsKey(\"type\")) {\r\n					symbol.setType(request.getParameter(\"type\"));\r\n				}\r\n\r\n				if (request.getParameterMap().containsKey(\"info\")) {\r\n					symbol.setInfo(request.getParameter(\"info\"));\r\n				}\r\n//System.out.println(\"\\n\\nSearching for: \" + symbol);\r\n				List<Symbol> symbols = brain.get(symbol);\r\n				JSONArray json = new JSONArray();\r\n				try {\r\n					for (Symbol s: symbols) {\r\n						json.put(s.toJSONObject());\r\n					}\r\n					response.setContentType(\"application/json\");\r\n					response.getWriter().println(json.toString());\r\n				} catch(Exception e) {\r\n					System.out.println(\"erroBrainGets: \" + e.getMessage());\r\n				}\r\n				\r\n				doCallback(callback, null);\r\n			}\r\n		});\r\n	}\r\n\r\n}','2021-02-08 21:06:19'),(78,'java','/**\r\n * LEA - Live Environment for Agents\r\n * by Renato Lenz Costalima\r\n * This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. \r\n */\r\npackage br.ifce.mind.actions.live;\r\n\r\nimport br.ifce.mind.actions.AbstractAction;\r\nimport br.ifce.mind.Agent;\r\nimport br.ifce.brain.Symbol;\r\nimport br.ifce.brain.Brain;\r\nimport br.ifce.brain.MySQLBrain;\r\n\r\nimport java.util.List;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\nimport org.json.JSONObject;\r\nimport org.json.JSONArray;\r\n\r\npublic class gets extends AbstractAction {\r\n\r\n	public void act(Object target, Object callback) {		\r\n		Object [] args = (Object []) target;\r\n		HttpServletRequest request = (HttpServletRequest) args[0];\r\n		HttpServletResponse response = (HttpServletResponse) args[1];\r\n        \r\n		Agent agent = this.getAgent();\r\n		agent.see(\"get\", \"library\", new AbstractAction() {\r\n			public void act(Object object, Object callback2) {\r\n				Brain brain = (Brain) object;\r\n\r\n				if (request.getParameterMap().containsKey(\"host\")) {\r\n					String host, db, user, pass, port;\r\n					host = request.getParameter(\"host\");\r\n					db = request.getParameter(\"db\");\r\n					user = request.getParameter(\"user\");\r\n					pass = request.getParameter(\"pass\");\r\n					port = request.getParameter(\"port\");\r\n					brain = new MySQLBrain(host, db, user, pass, port);\r\n				}\r\n\r\n//System.out.println(\"\\n\\nsearching in: \" + brain);\r\n\r\n				Symbol symbol;\r\n				symbol = new Symbol();\r\n				if (request.getParameterMap().containsKey(\"id\")) {\r\n					symbol.setId(new Integer(request.getParameter(\"id\")));\r\n				}\r\n\r\n				if (request.getParameterMap().containsKey(\"type\")) {\r\n					symbol.setType(request.getParameter(\"type\"));\r\n				}\r\n\r\n				if (request.getParameterMap().containsKey(\"info\")) {\r\n					symbol.setInfo(request.getParameter(\"info\"));\r\n				}\r\n//System.out.println(\"\\n\\nSearching for: \" + symbol);\r\n				List<Symbol> symbols = brain.get(symbol);\r\n				JSONArray json = new JSONArray();\r\n				try {\r\n					for (Symbol s: symbols) {\r\n						json.put(s.toJSONObject());\r\n					}\r\n					response.setContentType(\"application/json\");\r\n					response.getWriter().println(json.toString());\r\n				} catch(Exception e) {\r\n					System.out.println(\"erroBrainGets: \" + e.getMessage());\r\n				}\r\n				\r\n				doCallback(callback, null);\r\n			}\r\n		});\r\n	}\r\n\r\n}','2021-02-08 21:08:23'),(79,'java','/**\r\n * LEA - Live Environment for Agents\r\n * by Renato Lenz Costalima\r\n * This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. \r\n */\r\npackage br.ifce.mind.actions.live;\r\n\r\nimport br.ifce.brain.Link;\r\nimport br.ifce.mind.actions.AbstractAction;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\npublic class checkPermissions extends AbstractAction {\r\n\r\n	public void act(Object target, Object callback) {		\r\n		Object [] args = (Object []) target;\r\n		String username = (String) args[0];\r\n		Link link = (Link) args[1];\r\n		boolean permitted = false;\r\n		if (username == null) {\r\n		    permitted = false;\r\n		}\r\n		else { \r\n			if ((link.getA().getInfo() + \"/\").indexOf(username + \"/\") == 0 || username.equals(\"admin\")) {\r\n		        permitted = true;\r\n			}\r\n		}\r\n        \r\nSystem.err.println(\"WARNING! - brainController.checkTiePermissions Mockup!\")\r\n		doCallback(callback, true); //permitted);\r\n	}\r\n\r\n}','2021-02-08 21:37:28'),(80,'java','/**\r\n * LEA - Live Environment for Agents\r\n * by Renato Lenz Costalima\r\n * This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. \r\n */\r\npackage br.ifce.mind.actions.live;\r\n\r\nimport br.ifce.brain.Link;\r\nimport br.ifce.mind.actions.AbstractAction;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\npublic class checkPermissions extends AbstractAction {\r\n\r\n	public void act(Object target, Object callback) {		\r\n		Object [] args = (Object []) target;\r\n		String username = (String) args[0];\r\n		Link link = (Link) args[1];\r\n		boolean permitted = false;\r\n		if (username == null) {\r\n		    permitted = false;\r\n		}\r\n		else { \r\n			if ((link.getA().getInfo() + \"/\").indexOf(username + \"/\") == 0 || username.equals(\"admin\")) {\r\n		        permitted = true;\r\n			}\r\n		}\r\n        \r\nSystem.err.println(\"WARNING! - brainController.checkTiePermissions Mockup!\");\r\n		doCallback(callback, true); //permitted);\r\n	}\r\n\r\n}','2021-02-08 21:38:01'),(81,'java','package br.ifce.mind.actions.live;\r\n\r\nimport br.ifce.mind.actions.AbstractAction;\r\nimport br.ifce.mind.Agent;\r\nimport br.ifce.brain.Brain;\r\nimport br.ifce.brain.Link;\r\nimport br.ifce.brain.Symbol;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\npublic class tie extends AbstractAction {\r\n\r\n	public void act(Object target, Object callback) {\r\n		Object [] args = (Object []) target;\r\n		HttpServletRequest request = (HttpServletRequest) args[0];\r\n		HttpServletResponse response = (HttpServletResponse) args[1];\r\n\r\n        Agent agent = this.getAgent();\r\n        agent.see(\"getLinkFromRequest\", request, new AbstractAction () {\r\n			public void act(Object t, Object c) {\r\n				Link link = (Link) t;\r\nSystem.out.println(\"LINK_FROM_REQUEST \" + link);				\r\n				String username = (String) request.getSession().getAttribute(\"username\");\r\n				\r\n				agent.see(\"checkTiePermissions\", new Object[] {username, link}, new AbstractAction () {\r\n					public void act(Object permitted, Object c) {\r\n					    if ((Boolean) permitted) {\r\n        					agent.see(\"get\", \"library\", new AbstractAction () {\r\n            					public void act(Object t, Object c) {\r\n            						Brain brain = (Brain) t;\r\n		               						\r\n            						brain.tie(link);\r\n            \r\n                                    // author\r\n                                    agent.see(\"write\", new Object[] {username + \".created\", link.getId()});\r\n                                    /*brain.tie(new Link(\r\n                                        new Symbol(username), \r\n                                        new Symbol(\"tie\"),\r\n                                        new Symbol(link.getA().getId() + \",\" + link.getR().getId() + \",\" + link.getB().getId())\r\n                                    ));*/\r\n            \r\n            						try {\r\n            							response.setContentType(\"application/json\");\r\n            							response.getWriter().println(link.toJSONObject().toString());\r\n            						} catch(Exception e) {\r\n            							System.out.println(\"erroBrainTie: \" + e);\r\n            						}\r\n                				}\r\n            				});\r\n    					}\r\n        				else {\r\n        				    try {\r\n        						response.setContentType(\"application/json\");\r\n        						response.getWriter().println(\"{ok: false, error: \'Permission denied!\'}\");\r\n        					} catch(Exception e) {\r\n        						System.out.println(\"erroBrainTie: \" + e);\r\n        					}\r\n        				}\r\n					}\r\n				});\r\n			}\r\n		});\r\n	}\r\n\r\n}','2021-02-08 21:45:40'),(82,'java','package br.ifce.mind.actions.live;\r\n\r\nimport br.ifce.mind.actions.AbstractAction;\r\nimport br.ifce.brain.Symbol;\r\nimport br.ifce.brain.Link;\r\n\r\nimport java.util.Map;\r\nimport java.util.HashMap;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\n\r\nimport org.json.JSONObject;\r\nimport org.json.JSONException;\r\nimport org.json.HTTP;\r\n\r\nimport java.io.IOException;\r\nimport java.io.BufferedReader;\r\n\r\npublic class getLinkFromRequest extends AbstractAction {\r\n\r\n	public void act(Object target, Object callback) {\r\n		HttpServletRequest request = (HttpServletRequest) target;\r\n\r\n		Symbol a, b, r;\r\n\r\n		if (!request.getParameterMap().containsKey(\"a\")) {\r\n			a = new Symbol();\r\n		}\r\n		else {\r\n			a = new Symbol(Integer.parseInt(request.getParameter(\"a\")));\r\n		}\r\n		if (!request.getParameterMap().containsKey(\"b\")) {\r\n			b = new Symbol();\r\n		}\r\n		else {\r\n			b = new Symbol(Integer.parseInt(request.getParameter(\"b\")));\r\n		}\r\n		if (!request.getParameterMap().containsKey(\"r\")) {\r\n			r = new Symbol();\r\n		}\r\n		else {\r\n			r = new Symbol(request.getParameter(\"r\"));\r\n		}\r\n		\r\n		Map<String, Symbol> symbols = new HashMap<String, Symbol>();\r\n		symbols.put(\"a\", a);\r\n		symbols.put(\"b\", b);\r\n		symbols.put(\"r\", r);\r\n		Link link = new Link(a, r, b);\r\n		for (String key: symbols.keySet()) {\r\n			Symbol symbol = symbols.get(key);\r\n			if (request.getParameterMap().containsKey(key + \"[id]\")) {\r\n			    if (!\"\".equals(request.getParameter(key + \"[id]\"))) {\r\n				    symbol.setId(new Integer(request.getParameter(key + \"[id]\")));\r\n			    }\r\n			}	\r\n			if (request.getParameterMap().containsKey(key + \"[type]\")) {\r\n			    if (!\"\".equals(request.getParameter(key + \"[type]\"))) {\r\n    				symbol.setType(request.getParameter(key + \"[type]\"));\r\n			    }\r\n			}\r\n			if (request.getParameterMap().containsKey(key + \"[info]\")) {\r\n			    if (!\"\".equals(request.getParameter(key + \"[info]\"))) {\r\n    				symbol.setInfo(request.getParameter(key + \"[info]\"));\r\n			    }\r\n			}\r\n		}\r\n		\r\n		doCallback(callback, link);\r\n	}\r\n\r\n}','2021-02-08 21:47:38'),(83,'string','Naive','2021-02-08 21:47:57'),(84,'string','EmptyAction','2021-02-08 21:47:57'),(85,'js','new (function EmptyAction() {\n	this.act = function (args, resolve, reject) {\n		// your code here\n		resolve();\n	};\n})();','2021-02-08 21:47:57'),(86,'java.lang.String','null','2021-02-08 21:47:57'),(87,'java.lang.String','created','2021-02-08 21:47:57'),(88,'java.lang.Integer','0','2021-02-08 21:47:57'),(89,'string','live','2021-02-08 21:55:03'),(90,'js','new (function live() {\n	this.act = function (args, resolve, reject) {\n		console.log(\'Naive.live - \', this.agent.toString());\n		resolve();\n	};\n})();','2021-02-08 21:55:03'),(91,'string','Page','2021-02-08 22:14:42'),(92,'js','new (function live() {\n	this.act = function (args, resolve, reject) {\n		var agent = this.agent;\n		agent.see(\'addName\', \'Page Element\').then(function () {\n			agent.see(\'Element.live\', args).then(resolve).catch(reject);\n		});\n	};\n})();','2021-02-08 22:14:42'),(93,'string','Page','2021-02-08 22:17:03'),(94,'string','getHtml','2021-02-08 22:17:03'),(95,'html','<!-- LEA - Live Environment for Agents\n   - by Renato Lenz Costalima\n   - This Source Code Form is subject to the terms of the Mozilla Public\n   - License, v. 2.0. If a copy of the MPL was not distributed with this\n   - file, You can obtain one at https://mozilla.org/MPL/2.0/. -->\n<header>\n    <h1>Título da página</h1>\n    <nav>\n        <ul>\n            <li>\n                <a href=\"#\">Início</a>\n                <ul>\n                    <li><a href=\"#secao1\">Edição ao vivo</a></li>\n                    <li><a href=\"#secao2\">Edição assistida por agentes</a></li>\n                    <li><a href=\"#secaoForm\">Formulário</a></li>\n                </ul>\n            </li>\n            <li><a href=\"#\">Sobre</a></li>\n            <li><a href=\"#\">Contato</a></li>\n        </ul>\n    </nav>\n</header>\n<main>\n    <section id=\"secao1\">\n        <h1>Título da seção</h1>\n        \n        <p>Primeiro parágrafo começa aqui.</p>\n        \n        <p>Usa o <b>editor ao lado</b> para editar HTML (\"getHtml\" - estrutura e conteúdo), Javascript (\"onLoad\" - interação com usuário) e CSS (\"getCss\" - visual).</p>\n        \n        <p>Desculpa, isto é um protótipo. Se as letras não estiverem aparecendo, alterna entre as <input value=\"caixas de texto\" size=\"10\"> do editor.</p>\n        \n    </section>\n    <section id=\"secao2\">\n        <h1>Edição ao vivo/assistida por agentes</h1>\n        <p>Experimenta também a <b>edição assistida por agentes</b>, direcionando eventos do DOM para um agente, por exemplo:</p>\n        <pre>&lt;button onclick=\"getAgent(this).see(\'novaAcao\', \'args\');\"&gt;Clique para definir uma ação&lt;/button&gt;</pre>\n        <button onclick=\"getAgent(this).see(\'novaAcao\', \'args\');\">Clique para definir uma ação</button>\n    </section>\n    <section id=\"secaoForm\">\n        <h1>Exemplo de formulário</h1>\n        <form id=\"formExemplo\" onsubmit=\"getAgent(this).see(\'onSubmit\', this); return false;\">\n            <p>Formulários permitem receber do usuário vários tipos de dados.</p>\n            <label>\n                <span>\n                   Texto\n                </span>\n                <input name=\"texto\" type=\"text\">\n            </label>\n            <label>\n                <span>\n                   Número\n                </span>\n                <input name=\"numero\" type=\"number\">\n            </label>\n            <label>\n                <span>\n                   Data\n                </span>\n                <input name=\"data\" type=\"date\">\n            </label>\n            <label>\n                <span>\n                   Parágrafo\n                </span>\n                <textarea name=\"paragrafo\"></textarea>\n            </label>\n            <input type=\"submit\">\n        </form>\n    </section>\n</main>\n<aside>\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean ut arcu dolor.\n</aside>\n<footer>\n    Rodapé da página\n</footer>','2021-02-08 22:17:03'),(96,'string','html','2021-02-08 22:17:58'),(97,'js','new (function object() {\n	this.act = function (args, resolve, reject) {\n    	var returnFunction = new (function innerObject () {\n        	this.act = function (innerTarget, innerCallback) {\n        		innerCallback(args);\n        	};\n        })();\n        resolve(returnFunction);\n	};\n})();','2021-02-08 22:17:58'),(98,'string','Page','2021-02-08 22:18:15'),(99,'string','getHtml','2021-02-08 22:18:15'),(100,'html','<!-- LEA - Live Environment for Agents\n   - by Renato Lenz Costalima\n   - This Source Code Form is subject to the terms of the Mozilla Public\n   - License, v. 2.0. If a copy of the MPL was not distributed with this\n   - file, You can obtain one at https://mozilla.org/MPL/2.0/. -->\n<header>\n    <h1>Título da página</h1>\n    <nav>\n        <ul>\n            <li>\n                <a href=\"#\">Início</a>\n                <ul>\n                    <li><a href=\"#secao1\">Edição ao vivo</a></li>\n                    <li><a href=\"#secao2\">Edição assistida por agentes</a></li>\n                    <li><a href=\"#secaoForm\">Formulário</a></li>\n                </ul>\n            </li>\n            <li><a href=\"#\">Sobre</a></li>\n            <li><a href=\"#\">Contato</a></li>\n        </ul>\n    </nav>\n</header>\n<main>\n    <section id=\"secao1\">\n        <h1>Título da seção</h1>\n        \n        <p>Primeiro parágrafo começa aqui.</p>\n        \n        <p>Usa o <b>editor ao lado</b> para editar HTML (\"getHtml\" - estrutura e conteúdo), Javascript (\"onLoad\" - interação com usuário) e CSS (\"getCss\" - visual).</p>\n        \n        <p>Desculpa, isto é um protótipo. Se as letras não estiverem aparecendo, alterna entre as <input value=\"caixas de texto\" size=\"10\"> do editor.</p>\n        \n    </section>\n    <section id=\"secao2\">\n        <h1>Edição ao vivo/assistida por agentes</h1>\n        <p>Experimenta também a <b>edição assistida por agentes</b>, direcionando eventos do DOM para um agente, por exemplo:</p>\n        <pre>&lt;button onclick=\"getAgent(this).see(\'novaAcao\', \'args\');\"&gt;Clique para definir uma ação&lt;/button&gt;</pre>\n        <button onclick=\"getAgent(this).see(\'novaAcao\', \'args\');\">Clique para definir uma ação</button>\n    </section>\n    <section id=\"secaoForm\">\n        <h1>Exemplo de formulário</h1>\n        <form id=\"formExemplo\" onsubmit=\"getAgent(this).see(\'onSubmit\', this); return false;\">\n            <p>Formulários permitem receber do usuário vários tipos de dados.</p>\n            <label>\n                <span>\n                   Texto\n                </span>\n                <input name=\"texto\" type=\"text\">\n            </label>\n            <label>\n                <span>\n                   Número\n                </span>\n                <input name=\"numero\" type=\"number\">\n            </label>\n            <label>\n                <span>\n                   Data\n                </span>\n                <input name=\"data\" type=\"date\">\n            </label>\n            <label>\n                <span>\n                   Parágrafo\n                </span>\n                <textarea name=\"paragrafo\"></textarea>\n            </label>\n            <input type=\"submit\">\n        </form>\n    </section>\n</main>\n<aside>\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean ut arcu dolor.\n</aside>\n<footer>\n    Rodapé da página\n</footer>','2021-02-08 22:18:15'),(101,'string','Element','2021-02-08 22:21:55'),(102,'string','edit','2021-02-08 22:21:55'),(103,'js','new (function edit () {\n	this.act = function (args, resolve, reject) {\n		var agent = this.agent;\n		agent.see(\'editCss\').then(function () {\n    		agent.see(\'ask\', \'onLoad\').then(function () {\n    	        agent.see(\'editHtml\').then(resolve);\n    		});\n		}).catch(reject);\n	};\n})();','2021-02-08 22:21:55'),(104,'string','Element','2021-02-08 22:22:49'),(105,'string','appendTo','2021-02-08 22:22:49'),(106,'js','new (function appendTo () {\n	this.act = function (args, resolve, reject) {\n		var agent = this.agent;\n		\n		var tag;\n		var target;\n		if (typeof args == \'string\') {\n			args = args.split(\',\');\n		}\n		target = args[0];\n		tag = args[1];\n		if (target == null) {\n			target = $(\'.selected\');\n			if (target.length == 0) {\n				target = \'body\';\n			}\n		}\n		\n		agent.see(\'getBody\', tag).then(function (body) {\n			if (body != null) {\n				body.detach().appendTo(target);\n			}\n			\n			if (window[\'getAgent\'] == null) {\n				window[\'getAgent\'] = function (element) {\n					var _agent = $(element).closest(\'.Naive\')[0].agent;\n					window[\'_agent\'] = _agent;\n					return _agent;\n				};\n			}\n			\n			resolve();\n		});\n	};\n})();','2021-02-08 22:22:49'),(107,'string','addName','2021-02-08 22:23:23'),(108,'js','new (function addName () {\n	this.act = function (args, resolve, reject) {\n	    var agent = this.agent;\n	    var names = agent.mind.names;\n	    var name, relativeName, index;\n	    if (typeof args == \'string\') {\n	        if (args.indexOf(\':\') == -1) {\n    	        name = args;\n    	        relativeName = agent.mind.getName();\n    	        index = 1;\n	        }\n	        else {\n	            args = args.split(\':\');\n    	        name = args[0];\n    	        relativeName = args[1];\n    	        index = parseInt(args[2] || 1);\n	        }\n	    } \n	    else {\n	        name = args[0];\n	        relativeName = args[1];\n	        index = args[2] || 1;\n	    }\n	    \n	    var newNames = name.split(\' \');\n	    var indexRelative = names.indexOf(relativeName);\n	    var indexFinal = index + indexRelative;\n	    for (var i in newNames) {\n	        name = newNames[i];\n	        var indexNew = names.indexOf(name);\n		if (indexNew != -1) {\n		        indexFinal = indexNew + 1;\n		        continue;\n		}\n    	    \n	        names.splice(indexFinal, 0, name);\n	        indexFinal++;\n	    }\n\n	    resolve(names);\n	};\n})();','2021-02-08 22:23:23'),(109,'js','new (function live() {\n	this.act = function (args, resolve, reject) {\n		var agent = this.agent;\n		agent.see(\'addName\', \'Element\').then(resolve).catch(reject);\n	};\n})();','2021-02-08 22:23:51'),(110,'string','CE','2021-02-08 22:24:33'),(111,'js','new (function live() {\n	this.act = function (args, resolve, reject) {\n		let agent = this.agent;\n		agent.see(\'addName\', \'CE Element\').then(function () {\n		    agent.see(\'study\', \'askFor\');\n    		Ceed().then(ceed => {\n    		    ceed.see(\'addListener\', [\'newAgent\', agent]);\n    		})\n		    agent.see(\'Element.live\', args).then(resolve);\n		}).catch(reject);\n	};\n})();','2021-02-08 22:24:33'),(112,'string','editHtml','2021-02-08 22:25:11'),(113,'js','new (function editHtml () {\n	this.act = function (args, resolve, reject) {\n		var agent = this.agent;\n        agent.see(\'get\', \'body\').then(function (body) {\n		    Ceed(\'Script\').then(script =>\n				script.see(\'askBind\', [agent, \'getHtml\', body]).then(resolve)\n			);\n        }).catch(reject);\n	};\n})();','2021-02-08 22:25:11'),(114,'string','getBody','2021-02-08 22:25:44'),(115,'js','new (function getBody() {\n	this.act = async function (tag, resolve, reject) {\n	    let agent = this.agent;\n	    let body = await agent.see(\'get\', \'body\');\n	    if (!body) {\n	        body = await agent.see(\'newBody\', tag)\n	    }\n	    resolve(body);\n	};\n})();','2021-02-08 22:25:44'),(116,'string','editCss','2021-02-08 22:26:01'),(117,'js','new (function editCss () {\n	this.act = function (args, resolve, reject) {\n		var agent = this.agent;\n        agent.see(\'getStyle\').then(function (style) {\n		    Ceed(\'Script\').then(script => \n				script.see(\'askBind\', [agent, \'getCss\', style]).then(resolve)\n			);\n        }).catch(reject);\n	};\n})();','2021-02-08 22:26:01'),(118,'string','newBody','2021-02-08 22:26:29'),(119,'js','new (function newBody() {\n	this.act = function (tag, resolve, reject) {\n	    let agent = this.agent;\n		if (!tag) {\n			tag = \'<div>\';\n		}\n		let body = $(tag);\n		// bind agent-div\n		agent.see(\'set\', [\'body\', body]);\n		body[0].agent = agent;\n		agent.see(\'getNames\').then(function (names) {\n			body.addClass(names);\n		});\n		\n		agent.see(\'reloadHtml\').then(function () {\n			resolve(body);\n			agent.see(\'trigger\', \'onLoad\');\n		});\n		agent.see(\'reloadCss\');\n	};\n})();','2021-02-08 22:26:29'),(120,'string','getStyle','2021-02-08 22:26:49'),(121,'js','new (function getStyle () {\n	this.act = function (args, resolve, reject) {\n	    var agent = this.agent;\n	    agent.see(\'get\', \'style\').then(function (style) {\n	        if (style == null) {\n        		style = $(\'<style>\').appendTo(\'head\');\n        		agent.see(\'set\', [\'style\', style]).then(function () {\n        		    resolve(style);\n        		});\n	        }\n	        else {\n	            resolve(style);\n	        }\n	    });\n	};\n})();','2021-02-08 22:26:49'),(122,'string','onNewAgent','2021-02-08 22:27:21'),(123,'js','new (function onNewAgent() {\n	this.act = function (args, resolve, reject) {\n		var ce = this.agent;\n		ce.see(\'getBody\').then(async function (body) {\n			var select = body.find(\'select\');\n			select.empty();\n			var agents = (await Ceed()).agents;\n			var names = [];\n			\n			for (var i in agents) {\n			    try {\n    			    let agent = await agents[i][0];\n    			    agent.see(\'getNames\').then(name => {\n    			        if (!names.includes(name)) {\n    			            names.push(name);\n            			    let option = $(\'<option>\');\n            				option[0].agent = agent;\n        					option.text(name);\n            				select.prepend(option);\n    			        }\n    				});\n			    } catch {}\n			}\n			\n		});\n		resolve();\n	};\n})();','2021-02-08 22:27:21'),(124,'string','Script','2021-02-08 22:27:46'),(125,'string','askBind','2021-02-08 22:27:46'),(126,'js','new (function askBind () {\n	this.act = function (args, resolve, reject) {\n	    let agent = this.agent;\n	    let target = args[2];\n	    agent.see(\'askFor\', args).then(function (question) {\n	        let session = question.session;\n            session.removeAllListeners(\'change\');\n            if (target.html() != \'\') {\n                session.setValue(target.html(), -1);\n                session.getUndoManager().markClean();\n            }\n            session.on(\'change\', function() {\n                target.html(session.getValue());\n            });\n		resolve();\n	    });\n	};\n})();','2021-02-08 22:27:46'),(127,'string','reloadHtml','2021-02-08 22:28:19'),(128,'js','new (function reloadHtml () {\n	this.act = function (args, resolve, reject) {\n	    var agent = this.agent;\n        agent.see(\'get\', \'body\').then(function (body) {\n    		agent.see(\'getHtml\').then(function (html) {\n    		    body.append(html);\n    		    resolve(body);\n    		});\n        });\n	};\n})();','2021-02-08 22:28:19'),(129,'string','reloadCss','2021-02-08 22:28:31'),(130,'js','new (function reloadCss () {\n	this.act = function (args, resolve, reject) {\n		var agent = this.agent;\n        agent.see(\'getStyle\').then(function (style) {\n            if (style != null) {\n    		    agent.see(\'getCss\').then(function (css) {\n    		        style.html(css);\n    		        \n    		        resolve(true);\n    		    });\n            }\n		});\n	};\n})();','2021-02-08 22:28:32'),(131,'string','trigger','2021-02-08 22:28:45'),(132,'js','new (function trigger () {\n	this.act = function (eventName, resolve, reject) {\n		var agent = this.agent;\n	    agent.see(eventName).then(function (script) {\n	        $(\'body\').append(script);\n	        \n	        resolve(true);\n	    });\n	};\n})();','2021-02-08 22:28:45'),(133,'string','getCss','2021-02-08 22:29:23'),(134,'string','LEA/ce/novoPage','2021-02-08 22:29:40'),(135,'string','css','2021-02-08 22:29:40'),(136,'js','new (function live () {\n	this.act = function (target, resolve, reject) {\nconsole.log(\'SCRIPT LIVE\', this.agent.toString());\n		var agent = this.agent;\n		agent.see(\'addName\', \'Script Element\').then(async function () {\n		    let loadAce = new Promise((resolve, reject) => {\n    			$.ajax({\n    				type: \"GET\",\n    				url: \'https://pagecdn.io/lib/ace/1.4.12/ace.min.js\',\n    				dataType: \"script\",\n    				cache: true,\n    				success: function () { \n    					ace.config.set(\'modePath\', \'https://pagecdn.io/lib/ace/1.4.12/\');\n    					ace.config.set(\'workerPath\', \'https://pagecdn.io/lib/ace/1.4.12/\');\n    					ace.config.set(\'themePath\', \'https://pagecdn.io/lib/ace/1.4.12/\');\n    					\n    					resolve(true);\n    				}\n    			});\n		    });\n		    await Promise.all([\n		        loadAce,\n    			agent.see(\'study\', \'html\'),\n    			agent.see(\'study\', \'reloadHtml\'),\n    			agent.see(\'study\', \'getHtml\'),\n    			agent.see(\'study\', \'appendTo\'),\n    			agent.see(\'study\', \'trigger\'),\n    			agent.see(\'study\', \'onLoad\'),\n		        agent.see(\'study\', \'askFor\'),\n    			agent.see(\'study\', \'askBind\')\n    		]);\n			resolve(true);\n		});\n	};\n})();','2021-02-08 22:31:48'),(137,'html','<form onsubmit=\"getAgent(this).see(\'submit\', this); return false;\">\n    <div class=\"questions\"></div>\n    <div class=\"info\" style=\"width: 600px; height: 400px; float: left;\"></div>\n    <input name=\"type\" placeholder=\"type\" onchange=\"getAgent(this).see(\'typeChanged\', this);\">\n    <div class=\"versions\">\n        <label for=\"version\">version: </label>\n        <input id=\"version\" onchange=\"getAgent(this).see(\'changeVersion\', 0);\" value=\"0\">\n        / <label class=\"total\"></label>\n        <button accessKey=\"p\" onclick=\"getAgent(this).see(\'changeVersion\', -1);\" type=\"button\">previous</button>\n        <button accessKey=\"n\" onclick=\"getAgent(this).see(\'changeVersion\', 1);\" type=\"button\">next</button>\n    </div>\n    \n    <br>\n    <button accessKey=\"\" onclick=\"getAgent(this).see(\'executeClick\');\" type=\"button\">execute</button>\n    <button accessKey=\"s\" type=\"submit\">Save</button>\n    <button accessKey=\"w\" onclick=\"getAgent(this).see(\'close\');\" type=\"button\">close</button>\n    <button accessKey=\"t\" onclick=\"getAgent(this).see(\'setClick\');\" type=\"button\">set</button>\n    <button accessKey=\"r\" onclick=\"getAgent(this).see(\'readClick\');\" type=\"button\">read</button>\n    <button accessKey=\"d\" onclick=\"getAgent(this).see(\'download\');\" type=\"button\">download</button>\n</form>','2021-02-08 22:32:17'),(138,'string','onLoad','2021-02-08 22:32:49'),(139,'js','new (function onLoad () {\n	this.act = function (target, resolve, reject) {\n		var agent = this.agent;\n					\n		agent.see(\'get\', \'body\').then(function (body) {\n			/* adicionar barra de ferramentas\n			agent.see(\'newAgent\', \'scriptTools,tools\', function (tools) {\n				tools.see(\'live\', body);\n			});\n			*/\n			\n			var info = body.find(\'.info\');\n			console.warn(\'script onLoad\', body, info[0]);\n			\n			var editor = ace.edit(info[0]);\n			body.editor = editor;\n			agent.see(\'set\', [\'editor\', editor]);\n			editor.on(\'blur\', function () {\n				var question = body.find(\'.questions .selected\');\n				console.warn(\'changing\', editor.getSession().getUndoManager().isClean());\n				\n				if (!editor.getSession().getUndoManager().isClean()) {\n					question.addClass(\'changed\');\n					question.removeClass(\'learned\');\n				}\n				else {\n					question.addClass(\'learned\');\n					question.removeClass(\'changed\');\n				}\n			});\n			\n			var session = editor.getSession();\n			session.setMode(\'ace/mode/javascript\');\n			session.setOption(\'indentedSoftWrap\', false);\n			editor.setOptions({\n			  fontSize: \"14pt\"\n			});\n			session.setUseWrapMode(true);\n			\n			body.hide();\n			\n			resolve(\'\');\n		});\n	};\n})();','2021-02-08 22:32:49'),(140,'string','askFor','2021-02-08 22:33:19'),(141,'js','new (function askFor () {\n	this.act = function (args, resolve, reject) {\n		let script = this.agent;\n		let asker;\n		let key;\n		if (typeof args == \'string\') {\n    		let list = args.split(\'.\');\n    		asker = $(\'.\' + list[0])[0].agent;\n    		key = list[1];\n		}\n		else {\n		    asker = args[0];\n		    key = args[1];\n		}\n	    script.see(\'getBody\').then(function (body) {\n    		script.see(\'get\', \'editor\').then(async function (editor) {\n    		    if (editor == null) {\n    		        console.warn(\'Editor missing!\');\n    				// await script.see(\'appendTo\', \'body\');\n    		        return false;\n    		    }\n    		    \n    	        script.see(\'get\', \'parent\').then(function (parent) {\n        		    parent.see(\'show\');\n        		});\n                body.show();\n                \n    		    editor.removeAllListeners(\'change\');\n    		    \n		        let txType = body.find(\'input[name=type]\');\n    			let totalVersions = body.find(\'.versions > .total\');\n		        let questions = body.find(\'.questions\');\n		        let question = $(\'<label>\').prependTo(questions);\n		        let txName = $(\'<span>\').prependTo(question);\n		        question[0].agent = asker;\n		        question[0]._key = key;\n		        let name = asker.see(\'getNames\');\n		        name.then(function (names) {\n		            txName.html(names);\n		        });\n		        let keyInput = $(\'<input>\').appendTo(question);\n		        keyInput.val(key);\n		        \n                const session = ace.createEditSession(\'\', editor.getSession().getMode());\n                session.setOption(\'indentedSoftWrap\', false);\n        		session.setUseWrapMode(true);\n    			session.getUndoManager().markClean();\n        		\n		        question[0].session = session;\n		        let selectQuestion = function (event) {\n                    editor.setSession(question[0].session);\n		            questions.find(\'.selected\').removeClass(\'selected\');\n		            question.addClass(\'selected\');\n		            txType.val(question[0]._type);\n		            try {\n			            totalVersions.html(question[0].representations.length);\n		            } catch (e) {}\n                };\n                question.click(selectQuestion);\n                question.trigger(\'click\');\n		    \n    		    let type = \'\';\n    			let info = \'\';\n    			let representations;\n    			let context = 1;\n    			\n    			asker.see(\'read\', key).then(function (representations) {\n    				if (representations != null && representations.length > 0) {\n					    question[0].representations = representations;\n    				    let representation = representations[representations.length - context];\n    					type = representation.type;\n    					info = representation.info;\n    \n                        question[0]._type = type;\n    					txType.val(type);\n    					session.setValue(info, -1);\n    					session.getUndoManager().markClean();\n    					\n                        let mode = type;\n                        if (mode == \'js\') {\n                            mode = \'javascript\';\n                        }\n                        session.setMode(\'ace/mode/\' + mode);\n	                	resolve(false);\n    				}\n    				else {\n    					asker.see(\'read\', \'EmptyAction\').then(async function (representations) {\n    						if (representations != null && representations.length > 0) {\n    						    question[0].representations = representations;\n    						    let representation = representations[representations.length - 1];\n    							type = representation.type;\n    							info = representation.info;\n    							info = info.replace(new RegExp(\'agent\', \'g\'), await name);\n    							info = info.replace(new RegExp(\'EmptyAction\', \'g\'), key);\n                                question[0]._type = type;\n    							txType.val(type);\n    							session.setValue(info, -1);\n    							session.getUndoManager().markClean();\n    							\n                                let mode = type;\n                                if (mode == \'js\') {\n                                    mode = \'javascript\';\n                                }\n                                session.setMode(\'ace/mode/\' + mode);\n    						}\n		                    resolve(false);\n    					});\n    				}\n    			});\n                resolve(question[0]);\n		    });\n		});\n	};\n})();','2021-02-08 22:33:19'),(142,'html','<div class=\"answers\"></div>\n<form class=\"ce\" onsubmit=\"getAgent(this).see(\'seeClick\'); return false;\">\n    <select name=\"agent\"></select>\n    <input name=\"action\" placeholder=\"action\" type=\"list\" id=\"actions\" />\n    <datalist id=\"actions\"></datalist>\n    <input name=\"target\" placeholder=\"args\" />\n    <button accessKey=\"x\">run</button>\n    <button type=\"button\" accessKey=\"a\" onClick=\"getAgent(this).see(\'askClick\');\">view code</button>\n    <button type=\"button\" accessKey=\"\'\" onClick=\"getAgent(this).see(\'toggle\');\">hide</button>\n</form>','2021-02-08 22:34:10'),(143,'string','askClick','2021-02-08 22:35:40'),(144,'js','new (function askClick() {\n	this.act = function (args, resolve, reject) {\n		var agent = this.agent;\n		agent.see(\'getBody\').then(function (body) {\n    		var form = body.children(\'form.ce\');\n    		var action = form.children(\'input[name=action]\').val();\n    		var selectedAgent = form.find(\'select option:selected\')[0].agent;\n			selectedAgent.see(\'ask\', action);\n		});\n		resolve();\n	};\n})();','2021-02-08 22:35:40'),(145,'string','seeClick','2021-02-08 22:35:54'),(146,'js','new (function seeClick() {\n	this.act = function (args, resolve, reject) {\n		var agent = this.agent;\n		agent.see(\'getBody\').then(function (body) {\n    		var form = body.children(\'form.ce\');\n    		var action = form.children(\'input[name=action]\').val();\n    		var target = form.children(\'input[name=target]\').val();\n    		var selectedAgent = form.find(\'select option:selected\')[0].agent;\n			selectedAgent.see(action, target).then(function (answer) {\n				body.find(\'.answers\').append(\'<div class=\"\' + action + \'\">\' + answer + \'</div>\');\n			});\n		});\n		resolve();\n	};\n})();','2021-02-08 22:35:54'),(147,'js','new (function newBody() {\n	this.act = function (args, resolve, reject) {\n		let agent = this.agent;\n		agent.see(\'Element.newBody\', args).then(body => {\n		    agent.see(\'getAgent\', \'Script\').then(a => {\n		        a.see(\'appendTo\', body);\n		        resolve(body);\n    		    agent.see(\'getAgent\', \'Tools\').then(a => {\n    		        a.see(\'appendTo\', body);\n    		    });\n		    });\n		});\n	};\n})();','2021-02-08 22:36:22'),(148,'string','Tools','2021-02-08 22:37:12'),(149,'js','new (function live () {\n	this.act = async function (args, resolve, reject) {\n		let agent = this.agent;\nconsole.log(\'Tools.live\', agent.toString());\n		await agent.see(\'addName\', \'Tools Element\');\n		let response = await agent.see(\'Element.live\', args);\n		await agent.see(\'study\', \'newButton\');\n	    \n		resolve(response);\n	};\n})();','2021-02-08 22:37:12'),(150,'js','new (function onLoad() {\n	this.act = function (args, resolve, reject) {\n		// your code here\n		resolve();\n	};\n})();','2021-02-08 22:38:11'),(151,'string','show','2021-02-08 22:39:46'),(152,'js','new (function show() {\n	this.act = function (args, resolve, reject) {\n		var agent = this.agent;\n		agent.see(\'getBody\').then(function (body) {\n		    if (!body) {\n		        body.show();\n		    }\n		    resolve();\n		});\n	};\n})();','2021-02-08 22:39:46'),(153,'string','typeChanged','2021-02-08 22:40:04'),(154,'js','new (function typeChanged() {\n	this.act = function (type, resolve, reject) {\n	    var agent = this.agent;\n	    agent.see(\'get\', \'editor\').then(function (editor) {\n            var mode = type.value;\n            var session = editor.getSession();\n            var question = $(\'.questions .selected\')[0];\n            question._type = mode;\n            if (mode == \'js\') {\n                mode = \'javascript\';\n            }\n            session.setMode(\'ace/mode/\' + mode);\n	        \n	    });\n		resolve();\n	};\n})();','2021-02-08 22:40:04'),(155,'string','submit','2021-02-08 22:40:20'),(156,'js','new (function submit () {\n	this.act = function (args, resolve, reject) {\n		var script = this.agent;\n		script.see(\'get\', \'editor\').then(function (editor) {\n		    script.see(\'get\', \'body\').then(function (body) {\n		        var question = body.find(\'.selected\');\n		        var asker = question[0].agent;\n		        var key = question.find(\'input\').val();\n		        var type = body.find(\'input[name=type]\').val();\n				var info = editor.getValue();\n		        var answer = new Symbol(0, type, info);\n				asker.see(\'hearAnswer\', [key, answer]).then(function (learned) {\n				    console.log(\'Learned:\', key, learned);\n					if (learned) {\n						question.addClass(\'learned\');\n						question.removeClass(\'changed\');\n    					editor.getSession().getUndoManager().markClean();\n					}\n				});\n		        \n		    });\n		});\n	};\n})();','2021-02-08 22:40:20'),(157,'java','package br.ifce.mind.actions.live;\r\n\r\nimport br.ifce.mind.actions.AbstractAction;\r\nimport br.ifce.brain.Symbol;\r\nimport br.ifce.brain.Link;\r\n\r\nimport java.util.Map;\r\nimport java.util.HashMap;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\n\r\nimport org.json.JSONObject;\r\nimport org.json.JSONException;\r\nimport org.json.HTTP;\r\n\r\nimport java.io.IOException;\r\nimport java.io.BufferedReader;\r\n\r\npublic class getLinkFromRequest extends AbstractAction {\r\n\r\n	public void act(Object target, Object callback) {\r\n		HttpServletRequest request = (HttpServletRequest) target;\r\n\r\n		Symbol a, b, r;\r\n\r\n		if (!request.getParameterMap().containsKey(\"a\")) {\r\n			a = new Symbol();\r\n		}\r\n		else {\r\n			a = new Symbol(Integer.parseInt(request.getParameter(\"a\")));\r\n		}\r\n		if (!request.getParameterMap().containsKey(\"b\")) {\r\n			b = new Symbol();\r\n		}\r\n		else {\r\n			b = new Symbol(Integer.parseInt(request.getParameter(\"b\")));\r\n		}\r\n		if (!request.getParameterMap().containsKey(\"r\")) {\r\n			r = new Symbol();\r\n		}\r\n		else {\r\n			r = new Symbol(request.getParameter(\"r\"));\r\n		}\r\n		\r\n		Map<String, Symbol> symbols = new HashMap<String, Symbol>();\r\n		symbols.put(\"a\", a);\r\n		symbols.put(\"b\", b);\r\n		symbols.put(\"r\", r);\r\n		Link link = new Link(a, r, b);\r\n		for (String key: symbols.keySet()) {\r\n			Symbol symbol = symbols.get(key);\r\n			if (request.getParameterMap().containsKey(key + \"[id]\")) {\r\n			    //if (!\"\".equals(request.getParameter(key + \"[id]\"))) {\r\n				    symbol.setId(new Integer(request.getParameter(key + \"[id]\")));\r\n			    //}\r\n			}	\r\n			if (request.getParameterMap().containsKey(key + \"[type]\")) {\r\n			    //if (!\"\".equals(request.getParameter(key + \"[type]\"))) {\r\n    				symbol.setType(request.getParameter(key + \"[type]\"));\r\n			    //}\r\n			}\r\n			if (request.getParameterMap().containsKey(key + \"[info]\")) {\r\n			    //if (!\"\".equals(request.getParameter(key + \"[info]\"))) {\r\n    				symbol.setInfo(request.getParameter(key + \"[info]\"));\r\n			    //}\r\n			}\r\n		}\r\n		\r\n		doCallback(callback, link);\r\n	}\r\n\r\n}','2021-02-08 23:05:09'),(158,'css','','2021-02-08 23:05:33'),(159,'string','LEA/ce/novoPage/CE/Tools','2021-02-08 23:29:48'),(160,'html','<button onclick=\"getAgent(this).see(\'add\');\">+</button>','2021-02-08 23:29:48'),(161,'css','#auth {\r\n    position: fixed;\r\n    top: 0px;\r\n    right: 8px;\r\n}\r\nbody > * {\r\n    width: 52%;\r\n}\r\n[accesskey]::after {\r\n    content: \" [\" attr(accesskey) \"]\";\r\n}\r\n.CE {\r\n    border: 1px solid;\r\n    position: fixed;\r\n    width: 47%;\r\n    top: 20px;\r\n    right: 0px;\r\n    bottom: 4px;\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n.CE > form {\r\n    text-align: right;\r\n}\r\n.CE > * {\r\n    order: 2;\r\n}\r\n.Tools {\r\n    order: 1;\r\n    margin: 8px;\r\n}\r\n.answers {\r\n    display: none;\r\n}\r\n\r\n.questions {\r\n    display: flex;\r\n    overflow: auto;\r\n}\r\n\r\n.questions label {\r\n    border-width: 1px;\r\n    border-style: solid;\r\n    padding: 8px;\r\n    margin: 2px;\r\n    background: white;\r\n}\r\n.Script input[name=type], #version {\r\n    width: 105px;\r\n}\r\n\r\n.selected {\r\n    border-style: solid;\r\n    border-color: blue;\r\n    border-width: 2px !important;\r\n}\r\n\r\n.learned {\r\n    border-color: green !important;\r\n}\r\n\r\n.changed {\r\n    border-color: red !important;\r\n}\r\n','2021-02-08 23:31:01'),(162,'jsp','<%\r\nString actionName = (String) request.getAttribute(\"actionName\");\r\nString baseUrl = (String) request.getAttribute(\"baseUrl\");\r\nString controllerUrl = (String) request.getAttribute(\"controllerUrl\");\r\nString address = controllerUrl + actionName + \"/\";\r\n%><!DOCTYPE html>\r\n<html>\r\n<head>\r\n	<title>LEA - Live Environment for Agents</title>\r\n	<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" />\r\n	<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script>\r\n	<script type=\"module\">\r\n	import {Ceed, AskAgent} from  \'<%=baseUrl%>_js/ceed-0.5/ceed.js\';\r\n	import {AjaxBrain} from  \'<%=baseUrl%>_js/ceed-0.5/ajaxbrain.js\';\r\n	window.Ceed = Ceed;\r\n	window.AskAgent = AskAgent;\r\n	window.baseUrl = \'<%=baseUrl%>\';\r\n\r\n	var pathname = window.location.pathname.split(\'/\');\r\n	let paths = pathname.slice(3);\r\n    let controllerName = paths[0];\r\n    let agentName = paths.join(\'/\') + \'Page Page\';\r\n	$(function() {\r\n		Ceed().then(ceed => {\r\n		    let ask = new AskAgent(\'CE\');\r\n			ceed.see(\'set\', [\'ask\', ask]);\r\n			ceed.skills[\'ask\'] = ask;\r\n			ceed.see(\'setLibrary\', new AjaxBrain(\'/LEA/ce/brain/\'));\r\n			\r\n			Ceed(agentName).then(async agent => {\r\n				window.agent = agent;\r\n				agent.see(\'appendTo\', \'body\');\r\n				\r\n				agent.see(\'getAgent\', \'CE\').then(async ce => {\r\n        		    await ce.see(\'appendTo\', \'body\');\r\n            		agent.see(\'edit\');\r\n        		});\r\n			});\r\n			\r\n		});\r\n	});\r\n	</script>\r\n	<style>\r\n	#auth {\r\n        position: sticky;\r\n        top: 0;\r\n        text-align: right;\r\n    }\r\n    \r\n    #license {\r\n        position: fixed;\r\n        bottom: 8px;\r\n        right: 8px;\r\n        text-align: right;\r\n        width: 420px;\r\n    }\r\n    body {\r\n        padding-bottom: 75px;\r\n    }\r\n	</style>\r\n</head>\r\n<body>\r\n    <div id=\"auth\">\r\n    </div>\r\n    <div id=\"license\">\r\n        <b><a target=\"_blank\" href=\"https://tiia.com.br/\">LEA - Live Environment for Agents</a></b> by <a href=\"mailto: macaroots@gmail.com\">Renato Lenz Costalima</a><br />\r\n        This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at <a rel=\"license\" href=\"https://mozilla.org/MPL/2.0/\">https://mozilla.org/MPL/2.0/</a>.\r\n    </div>\r\n</body>\r\n</html>','2021-02-08 23:34:14'),(163,'string','BrainPage','2021-02-08 23:34:53'),(164,'html','<form id=\"formReason\" onsubmit=\"getAgent(this).see(\'submit\', this); return false;\">\r\n	<div id=\"formA\">\r\n		A: <input name=\"a[id]\" placeholder=\"id\"><input name=\"a[type]\" placeholder=\"type\"><textarea name=\"a[info]\" rows=\"6\" cols=\"50\" placeholder=\"info\"></textarea>\r\n	</div>\r\n	<div id=\"formR\">\r\n		R: <input name=\"r[id]\" placeholder=\"id\"><input name=\"r[type]\" placeholder=\"type\"><textarea name=\"r[info]\" rows=\"6\" cols=\"50\" placeholder=\"info\"></textarea>\r\n	</div>\r\n	<div id=\"formB\">\r\n		B: <input name=\"b[id]\" placeholder=\"id\"><input name=\"b[type]\" placeholder=\"type\"><textarea name=\"b[info]\" rows=\"6\" cols=\"50\" placeholder=\"info\"></textarea>\r\n	</div>\r\n	<div class=\"\">\r\n	    Order by: A <input id=\"order_a\" value=\"desc\"> R <input id=\"order_r\" value=\"desc\"> B <input id=\"order_b\" value=\"asc\">\r\n	</div>\r\n	<input type=\"submit\" value=\"Reason\">\r\n	<div class=\"responses\"></div>\r\n</form>','2021-02-08 23:34:53'),(165,'string','BrainPage','2021-02-08 23:35:45'),(166,'js','new (function submit () {\n	this.act = function (args, callback) {\n	    var presenter = this.agent;\n	    this.agent.see(\'get\', \'body\', function (body) {\n    		var response = body.find(\'.responses\');\n	        response.html(\'Reasoning...\');\n	        let data = $(args).serialize();\n	        fetch(\'/brain/reason?\' + data).then(async function (r) {\n                presenter.see(\'renderReason\', await r.json());\n    		});\n	    });\n	};\n})();','2021-02-08 23:35:45'),(167,'js','new (function submit () {\n	this.act = function (args, callback) {\n	    var presenter = this.agent;\n	    this.agent.see(\'get\', \'body\', function (body) {\n    		var response = body.find(\'.responses\');\n	        response.html(\'Reasoning...\');\n	        let data = $(args).serialize();\n	        fetch(\'/LEA/ce/brain/reason?\' + data).then(async function (r) {\n                presenter.see(\'renderReason\', await r.json());\n    		});\n	    });\n	};\n})();','2021-02-08 23:36:53'),(168,'string','renderReason','2021-02-08 23:38:39'),(169,'js','new (function renderReason () {\n	this.act = function (links, callback) {\n	    var agent = this.agent;\n	    agent.see(\'getBody\').then(function (body) {\n    		var response = body.find(\'.responses\');\n    	    response.html(\'\');\n    	    var objects = {};\n    	    var symbols = {};\n    	    for (var i in links) {\n    	        var link = links[i];\n                try {\n        	        symbols[link.a.id] = link.a;\n        	        symbols[link.r.id] = link.r;\n        	        symbols[link.b.id] = link.b;\n        	        if (!(link.a.id in objects)) {\n        	            objects[link.a.id] = {};\n        	        }\n        	        var methods = objects[link.a.id];\n        	        if (!(link.r.id in methods)) {\n        	            methods[link.r.id] = [];\n        	        }\n        	        methods[link.r.id].push(link.b.id);\n                } catch (e) {\n                    console.log(\'Error on reasoning!\');\n                    console.log(link);\n                    console.log(e);\n                }\n    	    }\n    	    \n    	    var loadSymbol = function (e) {\n    	        var li = this;\n    	        var id = li.innerHTML.split(\' - \')[0];\n    	        li.innerHTML += \'ing...\';\n    	        fetch(\'/brain/gets?id=\' + id).then(async function (r) {\n    	            let symbols = await r.json();\n    	            var symbol = symbols[0];\n    	            $(li).unbind();\n    	            li.innerHTML = \'\';\n    	            var form = $(\'<form>\').appendTo(li);\n    	            form.text(symbol.id + \' - \');\n    	            var txType = $(\'<input>\');\n    	            txType.val(symbol.type);\n    	            txType.appendTo(form);\n    	            var txInfo = $(\'<textarea rows=\"15\" cols=\"50\">\');\n    	            txInfo.appendTo(form).val(symbol.info);\n    	            var btSet = $(\'<button>set</button>\');\n    	            form.submit(function (e) {\n    	                var symbol = new Symbol(id, txType.val(), txInfo.val());\n    	                agent.see(\'setClick\', symbol);\n    	                return false;\n    	            })\n    	            btSet.appendTo(form);\n    	        });\n    	        e.stopPropagation();\n    	        return false;\n    	    };\n    	    \n    	    var objectsTree = $(\'<ul>\').appendTo(response);\n    	    for (var object in objects) {\n    	        var a = symbols[object];\n    	        var objectTree = $(\'<li>\').prependTo(objectsTree);\n    	        objectTree.append(\'<input type=\"checkbox\" id=\"c\' + object + \'\" checked=\"checked\" /><label for=\"c\' + object + \'\"><b>\' + a.id + \' - \' + a.type + \' - \' + a.info + \'</b></label>\');\n    	        var methods = objects[object];\n    	        var methodsTree = $(\'<ul>\').appendTo(objectTree);\n    	        for (var method in methods) {\n    	            var r = symbols[method];\n    	            var methodTree = $(\'<li>\').prependTo(methodsTree);\n    	            methodTree.append(\'<input type=\"checkbox\" id=\"c\' + object + \'_\' + method + \'\" /><label for=\"c\' + object + \'_\' + method + \'\"><i>\' + r.id + \' - \' + r.type + \' - \' + r.info + \'</i></label>\');\n    	            var values = methods[method];\n    	            var valuesTree = $(\'<ul>\').appendTo(methodTree);\n    	            for (var i in values) {\n    	                var b = symbols[values[i]];\n    		            var li = $(\'<li>\' + b.id + \' - \' + b.type + \' - Load</li>\').prependTo(valuesTree);\n    		            li.click(loadSymbol);\n    	            }\n    	        }\n    	    }\n	    });\n	};\n})();','2021-02-08 23:38:39'),(170,'java.lang.String','erroJSP','2021-02-08 23:51:38'),(171,'java','package br.ifce.mind.actions.live;\r\n\r\nimport br.ifce.mind.actions.AbstractAction;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\npublic class erroJSP extends AbstractAction {\r\n\r\n	public void act(Object target, Object callback) {\r\n		Object [] args = (Object []) target;\r\n		HttpServletRequest request = (HttpServletRequest) args[0];\r\n		HttpServletResponse response = (HttpServletResponse) args[1];\r\n		Exception e = (Exception) args[2];\r\n		System.err.println(\"ERRO JSP2:\" + e.getMessage());\r\n	}\r\n\r\n}','2021-02-08 23:51:38'),(172,'string','BrainPage/CE/Tools','2021-02-08 23:52:32'),(173,'string','getButtons','2021-02-09 00:03:01'),(174,'string','{\"page\":\"addPage\",\"div\":\"addDiv\",\"form\":\"addForm\",\"input\":\"addInput\",\"submit\":\"addSubmit\",\"agent\":\"newAgentClick\",\"suggestions\":\"suggestionClick\"}','2021-02-09 00:03:01'),(175,'string','string','2021-02-09 00:03:17'),(176,'js','new (function askFor() {\n	this.act = function (args, resolve, reject) {\n		this.agent.see(\'getAgent\', \'Script\').then(script => {\n		    script.see(\'askFor\', args).then(resolve);\n		}).catch(reject);\n	};\n})();','2021-02-09 00:04:50'),(177,'js','new (function newBody() {\r\n	this.act = async function (args, resolve, reject) {\r\n		let agent = this.agent;\r\n		let body = await agent.see(\'Element.newBody\', args);\r\n		resolve(body);\r\n		    \r\n    	let buttonsText = await agent.see(\'getButtons\');\r\n    	if (buttonsText) {\r\n    	    let buttons = JSON.parse(buttonsText);\r\n    	    for (let text in buttons) {\r\n    	        agent.see(\'newButton\', [text, buttons[text]]);\r\n    	    }\r\n    	}\r\n	};\r\n})();','2021-02-09 00:06:11'),(178,'string','newButton','2021-02-09 00:06:33'),(179,'js','new (function newButton () {\r\n	this.act = function (args, resolve, reject) {\r\n	    var text = args[0];\r\n	    var functionName = args[1];\r\n		var agent = this.agent;\r\n	    \r\n	    if (true == args[2]) {\r\n	        agent.see(\'getButtons\').then(function (buttons) {\r\n	            buttons = JSON.parse(buttons);\r\n	            buttons[text] = functionName;\r\n	            agent.see(\'write\', [\'getButtons\', JSON.stringify(buttons)]);\r\n	        });\r\n	    }\r\n	    \r\n		agent.see(\'getBody\').then(function (body) {\r\n		    agent.see(\'get\', \'parent\').then(function (parent) {\r\n    		    var bt = $(\'<button>\').appendTo(body);\r\n    		    bt.text(text);\r\n    		    bt.click(function (event) {\r\n    		        event.preventDefault();\r\n    		        if (!event.ctrlKey) {\r\n    		            parent.see(functionName);\r\n    		        }\r\n    		        else {\r\n    		            parent.see(\'ask\', functionName);\r\n    		        }\r\n    		    });\r\n		    });\r\n		});\r\n		\r\n		resolve(true);\r\n	};\r\n})();','2021-02-09 00:06:33'),(180,'string','add','2021-02-09 00:06:57'),(181,'js','new (function add () {\r\n	this.act = function (args, callback) {\r\n		var agent = this.agent;\r\n		agent.see(\'getBody\').then(function (body) {\r\n		    var form = $(\'<form>\').appendTo(body);\r\n		    var text = $(\'<input name=\"text\" placeholder=\"Button text\" />\').appendTo(form);\r\n		    var functionName = $(\'<input name=\"function\" placeholder=\"Function name\" />\').appendTo(form);\r\n		    var btOk = $(\'<input type=\"submit\" />\').appendTo(form);\r\n		    var btCancel = $(\'<input type=\"reset\" />\').appendTo(form);\r\n		    form.submit(function () {\r\n		        agent.see(\'newButton\', [text.val(), functionName.val(), true]);\r\n		        form.remove();\r\n		        return false;\r\n		    });\r\n		    btCancel.click(function () {\r\n		        form.remove();\r\n		    });\r\n		});\r\n		callback(true); // return statement\r\n	};\r\n})();','2021-02-09 00:06:57'),(182,'string','changeVersion','2021-02-09 00:08:46'),(183,'js','new (function changeVersion () {\r\n	this.act = function (args, resolve, reject) {\r\n		let agent = this.agent;\r\n		agent.see(\'get\', \'body\', function (body) {\r\n		    let input = body.find(\'#version\');\r\n		    let version = parseInt(input.val()) + args;\r\n		    input.val(version);\r\n		    let question = body.find(\'.questions > .selected\')[0];\r\n	        let txType = body.find(\'input[name=type]\');\r\n	        let session = question.session;\r\n		    \r\n		    try {\r\n    		    let representation = question.representations[version];\r\n    			let type = representation.type;\r\n    			let info = representation.info;\r\n    \r\n                question._type = type;\r\n    			txType.val(type);\r\n    			session.setValue(info, -1);\r\n    			session.getUndoManager().markClean();\r\n    			txType.trigger(\'change\');\r\n    			\r\n    		    resolve(representation);\r\n		    } catch {}\r\n		});\r\n	};\r\n})();','2021-02-09 00:08:46'),(184,'string','close','2021-02-09 00:09:08'),(185,'js','new (function close() {\r\n	this.act = function (args, resolve, reject) {\r\n		this.agent.see(\'get\', \'body\', function (body) {\r\n		    var questions = body.find(\'.questions\');\r\n		    var question = questions.find(\'.selected\');\r\n		    question.remove();\r\n		    if (questions.html() == \'\') {\r\n		        body.hide();\r\n		    }\r\n		    else {\r\n		        questions.find(\'label:first\').click();\r\n		    }\r\n		});\r\n		resolve();\r\n	};\r\n})();','2021-02-09 00:09:08'),(186,'html','<script>\r\n// your code here\r\n</script>','2021-02-09 00:14:00'),(187,'string','setClick','2021-02-09 00:18:23'),(188,'js','new (function setClick() {\r\n	this.act = function (args, resolve, reject) {\r\n		var script = this.agent;\r\n	    script.see(\'getBody\').then(function (body) {\r\n		    script.see(\'get\', \'editor\').then(function (editor) {\r\n		        var question = body.find(\'.selected\');\r\n		        var asker = question[0].agent;\r\n		        var key = question.find(\'input\').val();\r\n		        var type = body.find(\'input[name=type]\').val();\r\n				var info = editor.getValue();\r\n		        var answer = new Symbol(0, type, info);\r\n				asker.see(\'understand\', [key, answer]).then(function (learned) {\r\n				    console.log(\'Learned:\', key, learned);\r\n					if (learned) {\r\n						question.addClass(\'learned\');\r\n						question.removeClass(\'changed\');\r\n    					editor.getSession().getUndoManager().markClean();\r\n					}\r\n					resolve(learned);\r\n				});\r\n		        \r\n		    });\r\n		});\r\n	};\r\n})();','2021-02-09 00:18:23'),(189,'string','collapse','2021-02-09 00:18:49'),(190,'js','new (function collapse () {\r\n	this.act = function (args, resolve, reject) {\r\n	    this.agent.see(\'getBody\').then(function (body) {\r\n    		body.find(\'.responses input[type=checkbox]\').attr(\'checked\', false);\r\n    		resolve();\r\n	    })\r\n	};\r\n})();','2021-02-09 00:18:49'),(191,'css','ul input ~ ul {\r\n    display: none;\r\n}\r\nul input:checked ~ ul {\r\n    display: block;\r\n}','2021-02-09 00:19:13'),(192,'js','new (function renderReason () {\n	this.act = function (links, callback) {\n	    var agent = this.agent;\n	    agent.see(\'getBody\').then(function (body) {\n    		var response = body.find(\'.responses\');\n    	    response.html(\'\');\n    	    var objects = {};\n    	    var symbols = {};\n    	    for (var i in links) {\n    	        var link = links[i];\n                try {\n        	        symbols[link.a.id] = link.a;\n        	        symbols[link.r.id] = link.r;\n        	        symbols[link.b.id] = link.b;\n        	        if (!(link.a.id in objects)) {\n        	            objects[link.a.id] = {};\n        	        }\n        	        var methods = objects[link.a.id];\n        	        if (!(link.r.id in methods)) {\n        	            methods[link.r.id] = [];\n        	        }\n        	        methods[link.r.id].push(link.b.id);\n                } catch (e) {\n                    console.log(\'Error on reasoning!\');\n                    console.log(link);\n                    console.log(e);\n                }\n    	    }\n    	    \n    	    var loadSymbol = function (e) {\n    	        var li = this;\n    	        var id = li.innerHTML.split(\' - \')[0];\n    	        li.innerHTML += \'ing...\';\n    	        fetch(\'/LEA/ce/brain/gets?id=\' + id).then(async function (r) {\n    	            let symbols = await r.json();\n    	            var symbol = symbols[0];\n    	            $(li).unbind();\n    	            li.innerHTML = \'\';\n    	            var form = $(\'<form>\').appendTo(li);\n    	            form.text(symbol.id + \' - \');\n    	            var txType = $(\'<input>\');\n    	            txType.val(symbol.type);\n    	            txType.appendTo(form);\n    	            var txInfo = $(\'<textarea rows=\"15\" cols=\"50\">\');\n    	            txInfo.appendTo(form).val(symbol.info);\n    	            var btSet = $(\'<button>set</button>\');\n    	            form.submit(function (e) {\n    	                var symbol = new Symbol(id, txType.val(), txInfo.val());\n    	                agent.see(\'setClick\', symbol);\n    	                return false;\n    	            })\n    	            btSet.appendTo(form);\n    	        });\n    	        e.stopPropagation();\n    	        return false;\n    	    };\n    	    \n    	    var objectsTree = $(\'<ul>\').appendTo(response);\n    	    for (var object in objects) {\n    	        var a = symbols[object];\n    	        var objectTree = $(\'<li>\').prependTo(objectsTree);\n    	        objectTree.append(\'<input type=\"checkbox\" id=\"c\' + object + \'\" checked=\"checked\" /><label for=\"c\' + object + \'\"><b>\' + a.id + \' - \' + a.type + \' - \' + a.info + \'</b></label>\');\n    	        var methods = objects[object];\n    	        var methodsTree = $(\'<ul>\').appendTo(objectTree);\n    	        for (var method in methods) {\n    	            var r = symbols[method];\n    	            var methodTree = $(\'<li>\').prependTo(methodsTree);\n    	            methodTree.append(\'<input type=\"checkbox\" id=\"c\' + object + \'_\' + method + \'\" /><label for=\"c\' + object + \'_\' + method + \'\"><i>\' + r.id + \' - \' + r.type + \' - \' + r.info + \'</i></label>\');\n    	            var values = methods[method];\n    	            var valuesTree = $(\'<ul>\').appendTo(methodTree);\n    	            for (var i in values) {\n    	                var b = symbols[values[i]];\n    		            var li = $(\'<li>\' + b.id + \' - \' + b.type + \' - Load</li>\').prependTo(valuesTree);\n    		            li.click(loadSymbol);\n    	            }\n    	        }\n    	    }\n	    });\n	};\n})();','2021-02-09 00:23:43'),(193,'string','executeClick','2021-02-09 00:39:20'),(194,'js','new (function executeClick() {\r\n	this.act = function (args, resolve, reject) {\r\n		var script = this.agent;\r\n		script.see(\'setClick\').then(function () {\r\n		    script.see(\'getBody\').then(function (body) {\r\n		        var question = body.find(\'.selected\');\r\n	            var asker = question[0].agent;\r\n		        var key = question.find(\'input\').val();\r\n		        asker.see(key);\r\n    		});\r\n		});\r\n		resolve();\r\n	};\r\n})();','2021-02-09 00:39:20'),(195,'java.lang.String','dontKnow','2021-02-09 00:50:16'),(196,'java','/**\r\n * LEA - Live Environment for Agents\r\n * by Renato Lenz Costalima\r\n * This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. \r\n */\r\npackage br.tiia.ceed.actions;\r\n\r\nimport java.util.List;\r\n\r\nimport br.ifce.brain.Symbol;\r\nimport br.ifce.mind.Agent;\r\nimport br.ifce.mind.actions.AbstractAction;\r\n\r\npublic class DontKnow extends AbstractAction {\r\n	public void act(Object object, Object callback) {\r\n		Symbol perception = (Symbol) object;\r\n		Object concept = perception.getType();\r\n		\r\n		Agent agent = this.getAgent();\r\n\r\n		System.out.println(agent + \" - Don\'t know \'\" + concept + \"\': try to find out\");\r\n		\r\n		// tenta ler no banco de dados\r\n		agent.see(\"study\", perception, new AbstractAction() {\r\n			public void act(Object object, Object callback2) {\r\n				boolean learned = (Boolean) object;\r\n				if (learned) {\r\n					agent.getAgent().see(perception, callback);\r\n				}\r\n				else {\r\n				    agent.see(\"ask\", perception);\r\n					// se nÃ£o souber faz o index\r\n					perception.setType(\"index\");\r\n					agent.getAgent().see(perception, callback);\r\n				}\r\n			}\r\n		});\r\n	}\r\n	\r\n}','2021-02-09 00:50:16'),(197,'java','/**\r\n * LEA - Live Environment for Agents\r\n * by Renato Lenz Costalima\r\n * This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. \r\n */\r\npackage br.tiia.ceed.actions;\r\n\r\nimport java.util.List;\r\n\r\nimport br.ifce.brain.Symbol;\r\nimport br.ifce.mind.Agent;\r\nimport br.ifce.mind.actions.AbstractAction;\r\n\r\npublic class DontKnow extends AbstractAction {\r\n	public void act(Object object, Object callback) {\r\n		Symbol perception = (Symbol) object;\r\n		Object concept = perception.getType();\r\n		\r\n		Agent agent = this.getAgent();\r\n\r\n		System.out.println(agent + \" - Don\'t know \'\" + concept + \"\': try to find out\");\r\n		\r\n		// tenta ler no banco de dados\r\n		agent.see(\"study\", perception, new AbstractAction() {\r\n			public void act(Object object, Object callback2) {\r\n				boolean learned = (Boolean) object;\r\n				if (learned) {\r\n					agent.see(perception, callback);\r\n				}\r\n				else {\r\n				    agent.see(\"ask\", perception);\r\n					// se nao souber faz o index\r\n					perception.setType(\"index\");\r\n					agent.see(perception, callback);\r\n				}\r\n			}\r\n		});\r\n	}\r\n	\r\n}','2021-02-09 00:51:42'),(198,'java','/**\r\n * LEA - Live Environment for Agents\r\n * by Renato Lenz Costalima\r\n * This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. \r\n */\r\npackage br.tiia.ceed.actions;\r\n\r\nimport java.util.List;\r\n\r\nimport br.ifce.brain.Symbol;\r\nimport br.ifce.mind.Agent;\r\nimport br.ifce.mind.actions.AbstractAction;\r\n\r\npublic class DontKnow extends AbstractAction {\r\n	public void act(Object object, Object callback) {\r\n		Symbol perception = (Symbol) object;\r\n		Object concept = perception.getType();\r\n		\r\n		Agent agent = this.getAgent();\r\n\r\n		System.out.println(agent + \" - Don\'t know \'\" + concept + \"\': try to find out\");\r\n		\r\n		// tenta ler no banco de dados\r\n		agent.see(\"study\", perception, new AbstractAction() {\r\n			public void act(Object object, Object callback2) {\r\n				boolean learned = (Boolean) object;\r\n				if (learned) {\r\n					agent.see(perception, callback);\r\n				}\r\n				else {\r\n				    agent.see(\"ask\", perception);\r\n					// se nao souber faz o index\r\n					agent.see(\"index\", perception.getInfo(), callback);\r\n				}\r\n			}\r\n		});\r\n	}\r\n	\r\n}','2021-02-09 00:55:19'),(199,'css','#formExemplo > label {\n    display: table-row;\n}\n#formExemplo > label > * {\n    display: table-cell;\n    vertical-align: top;\n    padding-right: 10px;\n}\n','2021-02-09 01:38:06'),(200,'java','/**\r\n * LEA - Live Environment for Agents\r\n * by Renato Lenz Costalima\r\n * This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. \r\n */\r\npackage br.ifce.mind.actions.live;\r\n\r\nimport br.ifce.mind.actions.AbstractAction;\r\nimport br.ifce.mind.Agent;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\npublic class Live extends AbstractAction {\r\n\r\n	public void act(Object target, Object callback) {		\r\n		Object [] args = (Object []) target;\r\n		HttpServletRequest request = (HttpServletRequest) args[0];\r\n		HttpServletResponse response = (HttpServletResponse) args[1];\r\n		\r\n		Agent agent = this.getAgent();\r\n		agent.see(\"study\", \"dontKnow\");\r\n        \r\n		doCallback(callback, null);\r\n	}\r\n\r\n}','2021-02-09 02:04:00'),(201,'java','/**\r\n * LEA - Live Editing Applications\r\n * by Renato Lenz Costalima\r\n * This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/.\r\n * Permissions beyond the scope of this license may be available at macaroots@gmail.com.\r\n */\r\npackage br.ifce.mind.actions.live;\r\n\r\nimport br.ifce.mind.actions.AbstractAction;\r\nimport br.ifce.mind.Agent;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\npublic class Live extends AbstractAction {\r\n\r\n	public void act(Object target, Object callback) {		\r\n		Object [] args = (Object []) target;\r\n		HttpServletRequest request = (HttpServletRequest) args[0];\r\n		HttpServletResponse response = (HttpServletResponse) args[1];\r\n        \r\n		Agent agent = this.getAgent();\r\n		agent.see(\"study\", \"reason\");\r\n		agent.see(\"study\", \"getLinkFromRequest\");\r\n        \r\n		doCallback(callback, null);\r\n	}\r\n\r\n}','2021-02-09 02:11:14'),(202,'java','/**\r\n * LEA - Live Editing Applications\r\n * by Renato Lenz Costalima\r\n * This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/.\r\n * Permissions beyond the scope of this license may be available at macaroots@gmail.com.\r\n */\r\npackage br.ifce.mind.actions.live;\r\n\r\nimport br.ifce.mind.actions.AbstractAction;\r\nimport br.ifce.mind.Agent;\r\n\r\npublic class Live extends AbstractAction {\r\n\r\n	public void act(Object target, Object callback) {\r\n		Agent agent = this.getAgent();\r\n		agent.see(\"study\", \"reason\");\r\n		agent.see(\"study\", \"getLinkFromRequest\");\r\n        \r\n		doCallback(callback, null);\r\n	}\r\n\r\n}','2021-02-09 02:11:58'),(203,'java','/**\r\n * LEA - Live Environment for Agents\r\n * by Renato Lenz Costalima\r\n * This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. \r\n */\r\npackage br.ifce.mind.actions.live;\r\n\r\nimport br.ifce.mind.actions.AbstractAction;\r\nimport br.ifce.mind.Agent;\r\n\r\npublic class Live extends AbstractAction {\r\n\r\n	public void act(Object target, Object callback) {\r\n		Agent agent = this.getAgent();\r\n		agent.see(\"study\", \"dontKnow\");\r\n        \r\n		doCallback(callback, null);\r\n	}\r\n\r\n}','2021-02-09 02:12:36'),(204,'java','package br.ifce.mind.actions.live;\r\n\r\nimport br.ifce.mind.actions.AbstractAction;\r\nimport br.ifce.mind.Agent;\r\nimport br.ifce.mind.Ceed;\r\n\r\nimport java.util.List;\r\n\r\npublic class newAgent extends AbstractAction {\r\n\r\n	public void act(Object target, Object callback) {\r\n		String names = ((String) target);\r\n		Agent ce = this.getAgent();\r\n		\r\n		Agent a = Ceed.getAgent(names);\r\n\r\n		a.see(\"set\", new Object [] {\"parent\", ce}, new AbstractAction () {\r\n			public void act(Object t, Object c) {\r\n//				a.see(\"study\", \"ask\");\r\n\r\n				ce.see(\"set\", new Object [] {\"agent\", a});\r\n				ce.see(\"set\", new Object [] {\"agent-\" + names, a});\r\n				ce.see(\"getAll\", \"agentObserver\", new AbstractAction () {\r\n					public void act(Object target, Object c) {\r\n						for (Agent observer: (List<Agent>) target) {\r\n							observer.see(\"refreshAgents\", ce);\r\n						}\r\n					}\r\n				});\r\n				doCallback(callback, a);\r\n			}\r\n		});\r\n	}\r\n\r\n}','2021-05-23 23:41:59'),(205,'java','/**\r\n * LEA - Live Environment for Agents\r\n * by Renato Lenz Costalima\r\n * This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. \r\n */\r\npackage br.ifce.mind.actions.live;\r\n\r\nimport br.ifce.mind.actions.AbstractAction;\r\n\r\npublic class Live extends AbstractAction {\r\n\r\n	public void act(Object target, Object callback) {\r\n        Agent agent = this.getAgent();\r\n        System.out.println(agent.toString() + \" - Naive.live()\");\r\n		doCallback(callback, null);\r\n	}\r\n\r\n}','2021-05-23 23:44:41'),(206,'java','/**\r\n * LEA - Live Environment for Agents\r\n * by Renato Lenz Costalima\r\n * This Source Code Form is subject to the terms of the Mozilla Public\r\n * License, v. 2.0. If a copy of the MPL was not distributed with this\r\n * file, You can obtain one at https://mozilla.org/MPL/2.0/. \r\n */\r\npackage br.ifce.mind.actions.live;\r\n\r\nimport br.ifce.mind.actions.AbstractAction;\r\nimport br.ifce.mind.Agent;\r\n\r\npublic class Live extends AbstractAction {\r\n\r\n	public void act(Object target, Object callback) {\r\n        Agent agent = this.getAgent();\r\n        System.out.println(agent.toString() + \" - Naive.live()\");\r\n		doCallback(callback, null);\r\n	}\r\n\r\n}','2021-05-23 23:44:54'),(207,'java','package br.ifce.mind.actions.live;\r\n\r\nimport br.ifce.mind.actions.AbstractAction;\r\nimport br.ifce.mind.Agent;\r\n\r\npublic class live extends AbstractAction {\r\n\r\n	public void act(Object target, Object callback) {\r\n		Agent agent = this.getAgent();\r\n		\r\n        System.out.println(agent + \".front.live()\\n\\n\");\r\n\r\n		doCallback(callback, true);\r\n	}\r\n\r\n}','2021-05-24 15:19:52');
/*!40000 ALTER TABLE `symbols` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2021-06-01 13:46:38
